‚úÖ JVM Flags T·ªëi ∆Øu - C√≥ Ghi Ch√∫ & M·ª©c ƒê·ªô Hi·ªáu NƒÉng
Lu√¥n vi·∫øt d·∫°ng: -XX:+<flag> ƒë·ªÉ b·∫≠t
Lu√¥n vi·∫øt d·∫°ng: -XX:+<flag> ƒë·ªÉ b·∫≠t
Flag boolean (true/false) c·∫ßn ƒë√∫ng vi·∫øt hoa, kh√¥ng vi·∫øt th∆∞·ªùng (+UseFMA, kh√¥ng ph·∫£i +usefma)
Khi test: b·∫°n c√≥ th·ªÉ th√™m -XX:+PrintFlagsFinal ƒë·ªÉ ki·ªÉm tra gi√° tr·ªã cu·ªëi ƒë√£ set ch∆∞a
https://chriswhocodes.com/graalvm_jdk21_options.html

üìå Experimental & Vector API (N√™n b·∫≠t)
-XX:+UnlockExperimentalVMOptions 		# B·∫≠t flag experimental
-XX:+UnlockDiagnosticVMOptions			#B·∫≠t flag g·ª° l·ªói
--add-modules jdk.incubator.vector 		# B·∫≠t Vector API cho code Java


üõë Flags "·∫©n" ho·∫∑c hidden trong PrintFlagsFinal
ƒê·ªÉ l·ªô to√†n b·ªô flag, b·∫°n c√≥ th·ªÉ th·ª≠:
java -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+PrintFlagsWithComments
Ho·∫∑c d√πng th√™m:
-XX:+PrintFlagsRanges

üß† T·ªëi ∆∞u CPU & ƒëa lu·ªìng (R·∫•t n√™n d√πng cho CPU nhi·ªÅu nh√¢n)
-XX:+UseAllWindowsProcessorGroups 		# Cho ph√©p JVM th·∫•y to√†n b·ªô CPU group (Windows)
-XX:ActiveProcessorCount=72 			# √âp JVM d√πng ƒë·ªß s·ªë lu·ªìng d√π h·ªá ƒëi·ªÅu h√†nh kh√¥ng b√°o ƒë√∫ng
-Djdk.virtualThreadScheduler.parallelism=72 	# T·ªëi ∆∞u cho Virtual Thread (Java Loom)
-XX:CICompilerCount=36 				# TƒÉng s·ªë thread bi√™n d·ªãch JIT
-XX:+TieredCompilation 				# D√πng c·∫£ C1 + C2 compiler (m·∫∑c ƒë·ªãnh)
-XX:MaxInlineLevel=15 				# TƒÉng ƒë·ªô s√¢u inline function
-XX:+OptimizeFill 				# D√πng intrinsic memset/memfill thay loop fill (nhanh h∆°n)
-XX:+UsePinnedThreads				#‚Üí D√πng khi b·∫°n √©p lu·ªìng theo affinity. Gi√∫p tr√°nh vi·ªác JVM t·ª± di chuy·ªÉn thread sang CPU kh√°c.


üí™ SIMD & Vector Intrinsics ‚Äì R·∫•t li√™n quan AVX2, SSE, FMA3
-XX:UseSSE=4                            # D√πng t·ªëi ƒëa SSE4.2
-XX:+UseAES                             # B·∫≠t tƒÉng t·ªëc AES
-XX:+UseAESIntrinsics                   # D√πng AES-NI
-XX:+UseFMA                             # Fused Multiply-Add (FMA3)
-XX:+UsePopCountInstruction             # TƒÉng t·ªëc bit count
-XX:+UseCRC32Intrinsics                 # D√πng l·ªánh CRC32 (SSE4.2)
-XX:+UseSHA                             # D√πng SHA tƒÉng t·ªëc hash
-XX:+UseSHA256Intrinsics                # SHA-256 ph·∫ßn c·ª©ng (hi·∫øm)
-XX:+UseSHA512Intrinsics                # SHA-512 ph·∫ßn c·ª©ng (hi·∫øm)
-XX:+UseFastCRC32                       # CRC32 hardware nhanh h∆°n
-XX:+UseVectorCmov                      # D√πng conditional move trong vector
-XX:+UseVectorizedMismatchIntrinsic     # So s√°nh vector (Arrays.equals, mismatch‚Ä¶)
-XX:+UseMultiplyToLenIntrinsic          # T·ªëi ∆∞u BigInteger.multiply
-XX:+UseSquareToLenIntrinsic            # T·ªëi ∆∞u BigInteger.square
-XX:+SuperWordLoopUnrollAnalysis        # Ph√¢n t√≠ch unroll cho vector
-XX:+UseSSE42Intrinsics			#G·∫ßn gi·ªëng UseSSE=4 nh∆∞ng √©p r√µ SSE4.2 cho method c·ª• th·ªÉ
-XX:+UseLibmIntrinsic			#Gi·∫£m ƒë·ªô ch√≠nh x√°c nh∆∞ng tƒÉng t·ªëc (d√πng trong game/math engine)
-XX:+EnableValhalla			#N·∫øu b·∫°n ƒëang th·ª≠ nghi·ªám build Java Valhalla (inline class), flag n√†y gi√∫p t·ªëi ∆∞u layout cho flat data.
-XX:+UseVectorFastHash 			#N·∫øu d√πng JDK c√≥ patch SIMD hash (nh∆∞ OpenJ9 ho·∫∑c Azul), gi√∫p tƒÉng t·ªëc hashCode() c·ªßa c√°c ki·ªÉu c∆° b·∫£n b·∫±ng vector.







üß† Vector h√≥a n√¢ng cao (TƒÉng hi·ªáu nƒÉng t√≠nh to√°n)
-XX:+EnableVectorSupport 			# B·∫≠t vector h√≥a to√†n JVM
-XX:+EnableVectorReboxing 			# T·ªëi ∆∞u boxing/unboxing khi vector h√≥a
-XX:+EnableVectorAggressiveReboxing 		# √âp vector h√≥a k·ªÉ c·∫£ code ph·ª©c t·∫°p h∆°n
-XX:+UseBasicIntrinsics				#D√πng m·ªôt b·ªô t·∫≠p h·ª£p intrinsic ƒë∆°n gi·∫£n, √≠t ph·ª©c t·∫°p h∆°n C2 
-XX:+UseXmmI2F					#D√πng XMM register ƒë·ªÉ convert Integer to Float, AVX friendly.
-XX:+UseXmmRegToRegMoveAll			#√âp d√πng move register XMM‚ÜíXMM thay v√¨ memory move (tƒÉng SIMD throughput)
-XX:+UseAVX512Intrinsics			#N·∫øu m√°y c√≥ AVX-512, b·∫°n c√≥ th·ªÉ th·ª≠ flag n√†y (ZGC + AVX512).
-XX:+UseVectorUnrollLimit			#Gi√∫p tƒÉng ch√≠nh x√°c vector h√≥a khi k·∫øt h·ª£p unroll loop v·ªõi AVX2, t·ªëi ∆∞u loop vector
-XX:+UseRestrictedVectorization			## D√πng vector h√≥a k·ªÉ c·∫£ trong branch ph·ª©c t·∫°p
-XX:+EnableVectorGatherScatter   		# Cho ph√©p vector gather/scatter v·ªõi C2
-XX:+VectorizeHashCode				#TƒÉng t·ªëc String.hashCode() v√† c√°c h√†m hashCode() b·∫±ng SIMD/AVX.





üöÄ T·ªëi ∆∞u CPU n√¢ng cao (Hi·∫øm, an to√†n, n√™n test)
-XX:+UseLoopPredicate 				# T·ªëi ∆∞u h√≥a ƒëi·ªÅu ki·ªán v√≤ng l·∫∑p (loop hoisting)
-XX:+UseXmmLoadAndClearUpper 			# Gi·∫£m overhead chuy·ªÉn AVX‚ÜíSSE (t·ªët SIMD native)
-XX:+ReduceBulkZeroing 				# TƒÉng t·ªëc kh·ªüi t·∫°o v√πng nh·ªõ zero (new int[], float[])
-XX:+UseFPUForSpilling 				# D√πng FPU register tr√°nh spill khi register thi·∫øu (CPU-bound)
-XX:+UseFastStosb 				# (Windows) D√πng STOSB thay memset (zeroing block nhanh h∆°n)
-XX:+UseUnalignedAccesses 			# Cho ph√©p truy c·∫≠p kh√¥ng align (ByteBuffer, JNI‚Ä¶)
-XX:+UseNewCode 				# Backend sinh m√£ m√°y m·ªõi c·ªßa C2 (experimental)
-XX:AzMemPartition=0 				# G√°n heap v√†o NUMA partition 0 (socket ƒë·∫ßu)
-XX:UseAVX					#S·ª≠ dung AVX c√≥ th·ªÉ g√°n -XX:UseAVX=0 1 2 3
-XX:+UseCRC32Intrinsics				#B·∫≠t s·ª≠ d·ª•ng l·ªánh ph·∫ßn c·ª©ng CRC32 ƒë·ªÉ tƒÉng t·ªëc t√≠nh to√°n CRC32
-XX:+UseCMoveUnconditionally			#Lu√¥n √©p d√πng cmov
-XX:LoopMaxUnroll=16				#T·ªëi ∆∞u AVX, FMA
-XX:+TrustFinalNonStaticFields			#Tin t∆∞·ªüng final field kh√¥ng ƒë·ªïi
-XX:AllocatePrefetchLines=4			#s·ªë cache line prefetch
-XX:AllocatePrefetchStepSize=64 		#ƒëi·ªÅu ch·ªânh b∆∞·ªõc prefetch
-XX:+UseNUMAChunkAwareMemoryAllocation		#B·ªï sung th√™m cho NUMA, gi√∫p c·∫£i thi·ªán vi·ªác ph√¢n b·ªï b·ªô nh·ªõ theo chunk
-XX:+UseBiasedLocking / -XX:-UseBiasedLocking	#T√πy app, ƒë√¥i khi t·∫Øt b·∫≠t c√°i n√†y gi√∫p c·∫£i thi·ªán lock performance.
-XX:InlineSmallCodeCount=XXX			#Ch·ªânh s·ªë l∆∞·ª£ng h√†m nh·ªè ƒë∆∞·ª£c inline, c√≥ th·ªÉ ch·ªânh InlineSmallCode.
-XX:+UseJVMCICompiler				#K√≠ch ho·∫°t JVMCI n·∫øu b·∫°n mu·ªën d√πng Graal ho·∫∑c compiler b√™n ngo√†i.
-XX:+UseCondCardMark				#C·∫£i thi·ªán hi·ªáu qu·∫£ write barrier trong GC.
-XX:+UseSuperWord				#C·ªù d√πng ƒë·ªÉ t·ªëi ∆∞u v√≤ng l·∫∑p vector h√≥a trong JIT.
-XX:+UseRTM					#N·∫øu CPU h·ªó tr·ª£ Intel TSX, flag n√†y c√≥ th·ªÉ tƒÉng hi·ªáu nƒÉng lock-free.
-XX:+UseLargePagesIndividualAllocation		#T·ªëi ∆∞u cho h·ªá th·ªëng NUMA nhi·ªÅu RAM.
-XX:+UseTransparentHugePages			#Cho ph√©p JVM t·∫≠n d·ª•ng transparent hugepages t·ª´ kernel Linux
-XX:+UseCodeCacheFlushing			#Cho ph√©p flush code cache JIT n·∫øu ƒë·∫ßy.
-XX:+UseSpinLoopHint				#Gi√∫p hint spinlock b·∫±ng l·ªánh PAUSE tr√™n x86, c√≥ th·ªÉ gi√∫p reduce render/update
-XX:+UseVzeroupper				#Ch√®n l·ªánh vzeroupper ƒë·ªÉ tr√°nh AVX-SSE transition penalty tr√™n CPU AVX2
-XX:+UseLWPSynchronization			#D√πng Lightweight Primitive Synchronization (tr√™n Linux, h·ªó tr·ª£ futex-based lock).
-XX:+UseCrc32cIntrinsics			#D√πng CRC32C thay v√¨ CRC32 th√¥ng th∆∞·ªùng, c√≥ l·ª£i netty, code c√≥ checksum t·ªëc ƒë·ªô cao
-XX:+UseFastJNIAccessors			#TƒÉng t·ªëc JNI accessor methods (GetObjectField, SetIntField, v.v.) 
-XX:+UseFastArrayMethods			#D√πng b·∫£n optimized (th∆∞·ªùng l√† SIMD) cho c√°c System.arraycopy, Arrays.fill,...
-XX:+UseVectorizedHashCode			#SIMD tƒÉng t·ªëc Arrays.hashCode() (√≠t ƒë∆∞·ª£c bi·∫øt).
-XX:+UseFMAIntrinsics				#B·∫°n ƒë√£ c√≥ -XX:+UseFMA r·ªìi, nh∆∞ng tr√™n Zulu c√≥ l√∫c split ra ri√™ng trong PrintFlags.
-XX:+UseXmmLoadAndClearUpper			#Gi·∫£m AVX-SSE penalty
-XX:+UseCLMUL					#D√πng CLMUL ‚Äì b·∫°n c√≥ l·ªánh n√†y
-XX:+UseCountLeadingZerosInstruction  		#LZCNT n·∫øu CPU c√≥
-XX:+UseCountTrailingZerosInstruction		#TZCNT n·∫øu CPU c√≥
-XX:+UseOnlyInlinedBimorphic			#Inline method d·∫°ng bimorphic
-XX:+UseDynamicNumberOfCompilerThreads		#Scale thread compile
-XX:+UseLoopInvariantCodeMotion			#Loop hoisting s√¢u
-XX:+UseCompilerSafepoints			#Cho th√™m safepoint ·ªü c√°c ƒëo·∫°n compile,h·ªØu √≠ch n·∫øu b·∫°n mu·ªën t·ªëi ∆∞u vi·ªác d·ª´ng world thread m√† kh√¥ng g√¢y pause.
-XX:+SegmentedCodeCache				#Ph√¢n chia code cache theo t·ª´ng m·ª•c ƒë√≠ch: profiled, non... Gi√∫p tr√°nh ƒë·∫ßy cache v√† t·ªëi ∆∞u t√°ch bi·ªát hot code.
-XX:+UseJumpTables				#Cho ph√©p JIT d√πng jump tables cho switch-case ‚Äî c√≥ th·ªÉ tƒÉng t·ªëc m·ªôt s·ªë ƒëo·∫°n control-flow n·∫∑ng.
-XX:+InlineTypePassFieldsAsArgs			#Cho JVM truy·ªÅn t·ª´ng tr∆∞·ªùng(field) c·ªßa inline class nh∆∞ argument tr·ª±c ti·∫øp, boost hi·ªáu nƒÉng n·∫øu d√πng Valhalla 
-XX:+UseMallocOnlyForCodeHeap			#Ch·ªâ √°p d·ª•ng malloc cho code heap ‚Äî gi·∫£m fragmentation n·∫øu code cache l·ªõn (nh∆∞ khi d√πng nhi·ªÅu JIT thread).
-XX:NUMAChunkResizeWeight=15			#Nhanh nh·∫°y h∆°n trong vi·ªác ƒëi·ªÅu ch·ªânh chunk
-XX:NUMASpaceResizeRate=1610612736		#TƒÉng t·ªëc resize v√πng heap 
-XX:+NUMAStats					#N·∫øu b·∫°n mu·ªën th·∫•y th·ªëng k√™ NUMA trong log JVM (d√πng ƒë·ªÉ ph√¢n t√≠ch log)
-XX:+UseUnalignedAccessesInIntrinsics
-XX:+UseLWThreads                    		# Light-weight thread pinning (·∫©n, Java 22+)
-XX:+UseEagerInitialization
-XX:+DeoptimizeALot                 		# (Benchmark so s√°nh kh·∫£ nƒÉng recover khi JIT b·ªã rollback)
-XX:+UseCriticalJavaThreadPriority
-XX:-UseProfiledLoopPredicate
-XX:-UseJumpTables






üñ•Ô∏è Windows system-level tuning (Hi·∫øm, gi·∫£m jitter, tƒÉng ch√≠nh x√°c)
-XX:+UseThreadPriorities 			# JVM d√πng native priority c·ªßa thread
-XX:+UseHighResolutionTimer 			# Timer ƒë·ªô ph√¢n gi·∫£i cao, gi·∫£m jitter latency
-XX:+UsePreciseTimeStamps 			# TƒÉng ƒë·ªô ch√≠nh x√°c th·ªùi gian tr√™n Windows
-XX:+UseAltSigs 				# Signal handler ki·ªÉu alternative (hi·∫øm d√πng)
-XX:PreBlockSpin=10 				# Spin 10 v√≤ng tr∆∞·ªõc context switch khi ch·ªù lock

üß™ Deep tuning (Hi·∫øm, d√πng c·∫©n tr·ªçng cho benchmark ho·∫∑c mod native)
-XX:+UseVectorCmov 				# D√πng conditional move thay if branch SIMD
-XX:+AggressiveUnboxing				# √âp JVM b·ªè boxing s·ªõm (test k·ªπ tr∆∞·ªõc khi b·∫≠t)
-XX:+UseCountedLoopSafepoints 			# Safepoint trong loop ch√≠nh x√°c (debug native nhi·ªÅu thread)








üíæ RAM t·ªëi ∆∞u & c·∫•p ph√°t hi·∫øm (C·∫©n tr·ªçng, benchmark k·ªπ)
-XX:+UseTransparentHugePages 			# (Linux) D√πng Transparent HugePages t·ª± ƒë·ªông
-XX:+UseTLAB					#S·ª≠ d·ª•ng TLAB
-XX:+UseLargePages 				# K√≠ch ho·∫°t Large Pages 2MB (Windows c·∫ßn quy·ªÅn lock memory)
-XX:LargePageSizeInBytes=2m			# C·ª• th·ªÉ k√≠ch th∆∞·ªõc trang l·ªõn = 2MB
-XX:PretenureSizeThreshold=16m 			# Object >16MB t·∫°o th·∫≥ng OldGen (gi·∫£m copy GC)
-XX:TLABSize=2m 				# B·ªô nh·ªõ per thread (Thread Local Allocation Buffer)
-XX:MaxTLABSize=4m 				# Gi·ªõi h·∫°n t·ªëi ƒëa TLAB size (tr√°nh tr√†n RAM)
-XX:+ResizeTLAB 				# Cho ph√©p JVM t·ª± ƒëi·ªÅu ch·ªânh TLAB theo t·∫£i
-XX:SurvivorRatio=8 				# ƒêi·ªÅu ch·ªânh t·ª∑ l·ªá Eden:Survivor (benchmark n·∫øu object churn cao)
-XX:+AlwaysPreTouch 				# Ch·∫°m to√†n b·ªô heap tr∆∞·ªõc khi ch·∫°y (gi·∫£m lag n·∫øu Xmx l·ªõn)
-XX:+UseCompressedOops				#T·ªëi ∆∞u n√©n pointer v·ªõi ram t·ª´ 32Gb tr·ªü xu·ªëng
-XX:AllocatePrefetchDistance=192 		# Prefetch memory t·ªët h∆°n khi load chunk / rebuild mesh
-XX:+UseStringConcatOverflowCheck		#Gi√∫p tr√°nh l·ªói tr√†n b·ªô nh·ªõ trong concat string
-XX:+UseStringCache				#Gi√∫p caching c√°c chu·ªói string n·ªôi b·ªô, ƒë·∫∑c bi·ªát v·ªõi workload nhi·ªÅu String reuse.
-XX:+UseStrongUnorderedTimeStamps		#Thay th·∫ø UseFastUnorderedTimeStamps ƒë·ªÉ c√¢n b·∫±ng ƒë·ªô ch√≠nh x√°c v√† t·ªëc ƒë·ªô timestamp.
-XX:+UseNUMAChunkPinning			#C·ªë ƒë·ªãnh chunk b·ªô nh·ªõ theo NUMA node, t·ªëi ∆∞u h∆°n khi d√πng NUMA ph·ª©c t·∫°p.
-XX:+UseOnStackReplacement			#Cho ph√©p thay th·∫ø code t·∫°i ch·ªó khi ƒëang ch·∫°y, gi·∫£m overhead cho c√°c loop.
-XX:+UseStringUTF16				#Khi ·ª©ng d·ª•ng b·∫°n d√πng nhi·ªÅu String UTF-16, gi·∫£m b·ªô nh·ªõ v√† tƒÉng hi·ªáu nƒÉng string.
-XX:LoopUnrollLimit=256				#Gi·ªõi h·∫°n unroll loop r·ªông h∆°n c√≥ th·ªÉ tƒÉng hi·ªáu nƒÉng loop n·∫∑ng.
-XX:+UseXmmSaveRestore				#C√≥ th·ªÉ c·∫£i thi·ªán hi·ªáu su·∫•t save/restore SIMD register tr√™n m·ªôt s·ªë CPU.
-XX:+UseTLABFastRefills				#TƒÉng t·ªëc allocation trong TLAB khi refilling nhanh.
-XX:+UseMembar					#K√≠ch ho·∫°t memory barrier d√πng trong m·ªôt s·ªë ki·∫øn tr√∫c CPU ƒë·∫∑c bi·ªát.
-XX:+AlwaysActAsServerClassMachine		#Lu√¥n ch·∫°y ch·∫ø ƒë·ªô Server VM tuning, ngay c·∫£ n·∫øu m√°y b·ªã detect nh·∫ßm l√† client-class.
-XX:+UseNUMAChunkAllocation			#M·ªôt s·ªë b·∫£n Zulu 21 h·ªó tr·ª£ th·ª≠ nghi·ªám NUMA chunk pinning/allocation
-XX:+UseAdaptiveNUMAChunkSizing			#C·ªë g·∫Øng c√¢n b·∫±ng k√≠ch th∆∞·ªõc chunk tr√™n c√°c NUMA node.
-XX:+UseBiasedLocking				#Lock nh·∫π h∆°n x√≥a ·ªü jdk-15, nh∆∞ng Zulu c√≥ th·ªÉ v·∫´n gi·ªØ l·∫°i backwards compatibility.
-XX:+UseLocalPrefetch				#D√πng local prefetch logic khi load d·ªØ li·ªáu v√†o cache
-XX:+ZUncommitRelocationSet			#Cho ph√©p d·ªçn b·ªõt b·ªô nh·ªõ relocation trong ZGC gi·∫£m RAM nh∆∞ng latency c√≥ th·ªÉ tƒÉng nh·∫π
-XX:+UseTLSCHotSpotCache			#C·∫£i thi·ªán truy c·∫≠p TLS
-XX:ReservedCodeCacheSize=512m			#TƒÉng code cache ƒë·ªÉ tr√°nh vi·ªác JVM ph·∫£i d·ªçn d·∫πp code cache g√¢y lag trong runtime.
-XX:+UseSpinWait				#Gi√∫p thread ƒë·ª£i spin hi·ªáu qu·∫£ h∆°n, c√≥ th·ªÉ gi·∫£m ƒë·ªô tr·ªÖ thread switching.
-XX:+CompactStrings				#N·∫øu d√πng nhi·ªÅu chu·ªói Latin-1, gi·∫£m RAM.
-XX:+AlwaysPreTouchCodeHeap			#Pre-touch memory d√†nh cho code cache ‚Äî tr√°nh page fault khi JIT ho·∫°t ƒë·ªông m·∫°nh (th∆∞·ªùng d√πng trong benchmark).
-XX:+OptoBundling				#K√≠ch ho·∫°t vi·ªác "bundling" instruction(gom l·ªánh l·∫°i th√†nh nh√≥m t·ªëi ∆∞u h∆°n) trong giai ƒëo·∫°n sinh m√£ m√°y c·ªßa C2 
-XX:+UseInlineCaches
-XX:ContendedPaddingWidth=256   		# Padding th√™m gi·ªØa field d√πng @Contended
-XX:+AlignObjectFields           		# Align field ƒë·ªÉ tr√°nh false sharing
-XX:CodeCacheExpansionSize=262144   # 256 KB block expansion





üìÇ I/O t·ªëi ∆∞u & debug (Hi·∫øm, t√πy OS)
-Djdk.nio.maxCachedBufferSize=1048576				# Cache DirectBuffer t·ªëi ƒëa 1MB
-Dsun.zip.disableMemoryMapping=true				# T·∫Øt mmap ƒë·ªçc zip/jar (fix crash modpack n·∫∑ng)
-Djdk.io.File.enableADS=false 					# (Windows) T·∫Øt NTFS Alternate Data Streams ‚Üí IO nhanh h∆°n
-Djdk.util.zip.disableZip64ExtraFieldValidation=true 		# ƒê·ªçc zip kh√¥ng chu·∫©n, tr√°nh crash
-Djdk.nio.enableFastFileTransfer=true		 		# (Linux/macOS) D√πng sendfile() khi copy file


üõ† Profiling & debug native (Hi·∫øm, ch·ªâ b·∫≠t khi c·∫ßn)
-XX:+PreserveFramePointer 			# Gi·ªØ frame pointer ƒë·ªÉ profiler native stacktrace ch√≠nh x√°c
-XX:+StackTraceInThrowable 			# TƒÉng chi ti·∫øt stacktrace khi throw (gi√∫p debug mod)
-Dprism.forceGPU=true				#√âp JavaFX ch·∫°y GPU thay v√¨ CPU fallback
-Dprism.vsync=false				#T·∫Øt ƒë·ªìng b·ªô V-Sync, c√≥ th·ªÉ tƒÉng FPS (c√≥ th·ªÉ g√¢y tearing)
-XX:+UseNewCode					#B·∫≠t m·ªôt phi√™n b·∫£n m·ªõi c·ªßa code path trong JVM, c√≥ th·ªÉ l√† compiler, runtime ho·∫∑c m·ªôt module th·ª≠ nghi·ªám.
-XX:+UseNewCode2				#Gi·ªëng UseNewCode, b·∫≠t m·ªôt b·∫£n th·ª≠ nghi·ªám m·ªõi kh√°c trong JVM.
-XX:+UseNewCode3				#T∆∞∆°ng t·ª± UseNewCode v√† UseNewCode2, b·∫≠t th·ª≠ nghi·ªám m·ªôt module ho·∫∑c ƒëo·∫°n m√£ m·ªõi trong JVM.
-XX:+UseNewLongLShift				# B·∫≠t codegen m·ªõi cho ph√©p d·ªãch tr√°i (<<) ki·ªÉu long trong JIT compiler.
-XX:+UseUnalignedLoadStores      		# Cho ph√©p load/store kh√¥ng c·∫ßn align, h·ªØu √≠ch v·ªõi AVX2
-XX:+DoEscapeAnalysis            		# ƒê·∫£m b·∫£o Escape Analysis lu√¥n b·∫≠t (nhi·ªÅu JDK build t·∫Øt)
-XX:+UseReciprocalDivide         		# D√πng ph√©p chia ngh·ªãch ƒë·∫£o nhanh h∆°n




üî• TSX, BMI, Advanced SIMD (‚ö†Ô∏è R·∫•t hi·∫øm, c·∫ßn m√°y h·ªó tr·ª£)
-XX:+UseRTMLocking                    		#D√πng TSX/RTM n·∫øu CPU h·ªó tr·ª£ (Haswell+)
-XX:+UseRTMDeopt                     		#T·ª± ƒë·ªông fallback n·∫øu TSX fail
-XX:+UseBMI1Instructions               		#BMI1: andn, tzcnt (C·∫ßn JVM ƒë·∫∑c bi·ªát)
-XX:+UseBMI2Instructions              		#BMI2: pext, pdep (hi·∫øm, nh∆∞ tr√™n)
-XX:+EliminateLocks                    		# B·ªè c√°c lock kh√¥ng c·∫ßn thi·∫øt
-XX:+UseVectorizedHashCode			#SIMD h√≥a String.hashCode()
-XX:+UseXmmRegToRegMoveAll			#XMM move register-only
-XX:+EnableJVMCI				#K√≠ch ho·∫°t JVMCI n·∫øu kh√¥ng m·∫∑c ƒë·ªãnh b·∫≠t.
-XX:+TraceDeoptimizationReasons			#In chi ti·∫øt l√Ω do v√¨ sao method b·ªã deoptimize. Kh√°c v·ªõi +TraceDeoptimization.
-XX:+EnableJVMCIProduct				#B·∫≠t c√°c t√≠nh nƒÉng JVMCI nh∆∞ graal.ShowGraph n·∫øu b·∫£n build cho ph√©p.
-XX:+TraceIntrinsification			#Ghi log m·ªói method n√†o ƒë∆∞·ª£c d√πng intrinsic JIT thay v√¨ bytecode.
-XX:+ForceNUMA					#√âp b·∫≠t NUMA ngay c·∫£ khi BIOS ho·∫∑c OS kh√¥ng b√°o NUMA r√µ r√†ng.
-XX:+UseFastIntegerArithmetic			#SIMD h√≥a ph√©p c·ªông/tr·ª´/mul trong Integer ‚Äì build ƒë·∫∑c bi·ªát.
-XX:+OptimizeJumpTables				#T·ªëi ∆∞u switch-case jump table (hi·∫øm g·∫∑p nh∆∞ng hi·ªáu qu·∫£ khi mod switch-heavy).
-XX:+UseLowLatencyHeapRegionPolicy		#ZGC build ƒë·∫∑c bi·ªát ‚Äì gi√∫p gi·∫£m th·ªùi gian delay khi thay ƒë·ªïi heap region.
-XX:+EnableThreadLocalAllocation		#(kh√¥ng ph·∫£i +UseTLAB)T·ªëi ∆∞u ph√¢n b·ªï b·ªô nh·ªõ per thread.
-XX:+AggressiveHeap				#Oracle JVM c·ªï(r·∫•t c≈©)T·ª± scale heap v√† tuning theo m√°y. Kh√¥ng n√™n d√πng b·∫£n hi·ªán ƒë·∫°i.
-XX:+UseTrivialHashing				#G√°n hashCode() ƒë∆°n gi·∫£n h∆°n cho object ƒë·ªÉ gi·∫£m overhead hashTable.
-XX:+AlignVector                          	# √âp JVM cƒÉn ch·ªânh vector cho c√°c ph√©p to√°n SIMD ‚Äì c√≥ th·ªÉ tƒÉng hi·ªáu nƒÉng nh∆∞ng c·∫ßn CPU h·ªó tr·ª£ t·ªët
-XX:+AlwaysAtomicAccesses                	# √âp m·ªçi truy c·∫≠p field ƒë·ªÅu l√† atomic ‚Äì h·ªØu √≠ch ƒë·ªÉ test thread-safety nh∆∞ng s·∫Ω gi·∫£m hi·ªáu nƒÉng
-XX:+AlwaysCompileLoopMethods            	# JVM s·∫Ω lu√¥n compile c√°c method ch·ª©a v√≤ng l·∫∑p, thay v√¨ ƒë·ªÉ interpreter ch·∫°y ‚Äì gi√∫p tƒÉng hi·ªáu nƒÉng v√≤ng l·∫∑p nh·ªè
-XX:+AlwaysPreTouchStacks                	# Preload tr∆∞·ªõc to√†n b·ªô b·ªô nh·ªõ stack cho m·ªói thread ‚Äì gi·∫£m page fault khi thread m·ªõi kh·ªüi ch·∫°y
-XX:+AlwaysRestoreFPU                    	# JVM s·∫Ω lu√¥n kh√¥i ph·ª•c thanh ghi FPU sau m·ªói native call ‚Äì ƒë·∫£m b·∫£o ch√≠nh x√°c to√°n h·ªçc, tr√°nh l·ªói ·∫©n
-XX:+AlwaysTenure                        	# √âp t·∫•t c·∫£ object v√†o old generation ngay t·ª´ ƒë·∫ßu ‚Äì d√πng ƒë·ªÉ test GC ho·∫∑c behavior long-lived object
-XX:+CICompilerCountPerCPU               	# JVM t·ª± ƒë·ªông ƒë·∫∑t s·ªë lu·ªìng JIT theo s·ªë CPU th·ª±c t·∫ø ‚Äì t·ªëi ∆∞u compile cho ƒëa nh√¢n
-XX:+DeferInitialCardMark                	# Ho√£n ghi mark GC (card table) ban ƒë·∫ßu ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t khi nhi·ªÅu c·∫•p ph√°t di·ªÖn ra nhanh
-XX:+DisableExplicitGC                   	# V√¥ hi·ªáu h√≥a l·ªánh `System.gc()` ‚Äì ngƒÉn ·ª©ng d·ª•ng g·ªçi full GC th·ªß c√¥ng, gi·ªØ GC ho·∫°t ƒë·ªông t·ª± ƒë·ªông ·ªïn ƒë·ªãnh
-XX:+ExpandSubTypeCheckAtParseTime       	# M·ªü r·ªông ki·ªÉm tra ki·ªÉu ph·ª• (subtype) t·ª´ s·ªõm khi parsing bytecode ‚Äì gi√∫p t·ªëi ∆∞u ph√¢n t√≠ch ki·ªÉu
-XX:+ExplicitGCInvokesConcurrent         	# Bi·∫øn `System.gc()` th√†nh concurrent GC (thay v√¨ stop-the-world) ‚Äì h·ªØu √≠ch khi mu·ªën tr√°nh lag
-XX:+ForceTimeHighResolution             	# √âp JVM d√πng ƒë·ªìng h·ªì c√≥ ƒë·ªô ch√≠nh x√°c cao(hi-res) cho ƒëo th·ªùi gian - ph√π h·ª£p v·ªõi ·ª©ng d·ª•ng c·∫ßn timing ch√≠nh x√°c
-XX:+ForceUnreachable                    	# √âp JVM xo√° nh√°nh kh√¥ng th·ªÉ ƒëi ƒë·∫øn trong m√£ ‚Äì gi√∫p t·ªëi ∆∞u JIT bytecode s·∫°ch h∆°n
-XX:+HeapDumpOnOutOfMemoryError          	# JVM s·∫Ω t·∫°o file heap dump n·∫øu g·∫∑p l·ªói OOM ‚Äì c·ª±c k·ª≥ h·ªØu √≠ch ƒë·ªÉ debug l·ªói b·ªô nh·ªõ
-XX:+G1VerifyHeapRegionCodeRoots         	# B·∫≠t ki·ªÉm tra n·ªôi dung heap trong G1GC ‚Äì ph√°t hi·ªán l·ªói sai l·ªách v√πng nh·ªõ trong l√∫c GC
-XX:+AllowParallelDefineClass            	# Cho ph√©p load class song song t·ª´ nhi·ªÅu lu·ªìng ‚Äì tƒÉng t·ªëc ƒë·ªô class loading n·∫øu classloader thread-safe
-XX:+UseXMMForObjInit				#Cho ph√©p s·ª≠ d·ª•ng thanh ghi XMM (SSE2) ƒë·ªÉ kh·ªüi t·∫°o object (zero-initialization memory c·ªßa object).
-XX:+UseXmmI2D					#D√πng thanh ghi XMM ƒë·ªÉ convert s·ªë nguy√™n(int) sang s·ªë th·ª±c(double) g·ªçi l√† Integer-to-Double conversion (I2D).
-XX:+UseSystemMemoryBarrier			#JVM s·∫Ω s·ª≠ d·ª•ng h√†m g·ªçi h·ªá ƒëi·ªÅu h√†nh ho·∫∑c b·ªô l·ªánh cung c·∫•p b·ªüi h·ªá th·ªëng ƒë·ªÉ th·ª±c hi·ªán memory barrier
-XX:+UseStoreImmI16				#Cho ph√©p JIT compiler sinh l·ªánh m√°y t·ªëi ∆∞u ki·ªÉu store Immediate 16-bit Integer (ImmI16)
-XX:+UsePoly1305Intrinsics			#B·∫≠t t√≠nh nƒÉng s·ª≠ d·ª•ng intrinsics cho thu·∫≠t to√°n Poly1305 ƒë·ªÉ t·∫≠n d·ª•ng l·ªánh ph·∫ßn c·ª©ng ƒë·∫∑c bi·ªát ƒë·ªÉ tƒÉng t·ªëc x·ª≠ l√Ω.
-XX:+UseSHA3Intrinsics				#B·∫≠t t√≠nh nƒÉng s·ª≠ d·ª•ng intrinsic functions (h√†m n·ªôi t·∫°i) c·ªßa CPU ƒë·ªÉ t√≠nh to√°n h√†m bƒÉm SHA-3 nhanh h∆°n.
-XX:+AggressiveOpts				#B·∫≠t c√°c t·ªëi ∆∞u JIT "ch∆∞a ch√≠nh th·ª©c" s·∫Ω ƒë∆∞·ª£c b·∫≠t m·∫∑c ƒë·ªãnh trong b·∫£n t∆∞∆°ng lai












üß¨ ZGC & Thread flags r·∫•t ƒë·∫∑c bi·ªát (ZGC >= JDK 21)
-XX:+ZVerifyViews				#Ki·ªÉm tra c√°c ZPage View Map ‚Äì ch·ªâ n√™n d√πng n·∫øu debug GC memory leak
-XX:+ZUncommitRelocationSetImmediate		#Unmap c√°c relocation set kh√¥ng ch·ªù delay ‚Äì ti·∫øt ki·ªám RAM, nh∆∞ng c√≥ th·ªÉ lag nh·∫π.
-XX:+ZRetainPageTable				#Debug: gi·ªØ nguy√™n page table sau khi GC xong, d·ªÖ trace memory.

üî¨ GraalVM ho·∫∑c debug-only flags
-XX:+TraceInlineCacheClearing			#Log khi IC (inline cache) b·ªã x√≥a ‚Äì r·∫•t s√¢u trong tiered JIT.
-Dgraal.TraceEscapeAnalysis=true		#Theo d√µi EA (Escape Analysis) ƒë·ªÉ bi·∫øt method n√†o kh√¥ng b·ªã allocate object.
-Dgraal.OptTailCalls=true			#Cho ph√©p tail-call optimization trong Graal (r·∫•t hi·∫øm).
-Dgraal.OptRemoveNeverExecutedCode=true		#X√≥a branch kh√¥ng bao gi·ªù ch·∫°y, gi·∫£m k√≠ch th∆∞·ªõc m√£ JIT.
-XX:+UseHeapRegionScanPolicy			#Ch·ªâ th·∫•y trong GraalVM ho·∫∑c b·∫£n HotSpot c√≥ GC t√πy ch·ªânh.
-XX:+UseGraalStubs               		# Graal stub vector ops nhanh h∆°n



üóÇ Heap & GC n√¢ng cao (Hi·∫øm, gi√∫p ·ªïn ƒë·ªãnh h∆°n)
-XX:MinHeapFreeRatio=20 			# Gi·ªØ t·ªëi thi·ªÉu 20% heap free (gi·∫£m freq GC ƒë·ªôt ng·ªôt)
-XX:MaxHeapFreeRatio=40 			# Thu heap khi s·ª≠ d·ª•ng <60%
-XX:+HeapDumpOnOutOfMemoryError 		# T·ª± ƒë·ªông dump heap khi OOM (debug memory leak)
-XX:+UseRTMForStackLock				# S·ª≠ d·ª•ng RTM cho stack locks (nh·∫π h∆°n object monitor)
-XX:RTMRetryCount=5				# S·ªë l·∫ßn retry khi RTM th·∫•t b·∫°i
-XX:+UseSimpleArrayEquals			#N·∫øu b·∫≠t, c√°c Arrays.equals() d√πng phi√™n b·∫£n ƒë∆°n gi·∫£n h√≥a
-XX:+UseTypeProfileInlining			#D√πng profiling ki·ªÉu object ƒë·ªÉ inline t·ªët h∆°n c√°c method generic/abstract.
-XX:+TraceSuperWord				#Theo d√µi h√†nh vi SuperWord ƒë·ªÉ debug SIMD kh√¥ng auto vectorize
-XX:+UseOnlyInlinedBCE				#B·ªè bounds check elimination cho c√°c method ch∆∞a ƒë∆∞·ª£c inline
-XX:+EagerJVMCI					#JVMCI ƒë∆∞·ª£c init s·ªõm h∆°n, gi·∫£m latency kh·ªüi ƒë·∫ßu.




üîß Native & JNI tuning (Hi·∫øm, hi·ªáu nƒÉng cao)
-XX:+UseBiasedLocking 				# T·∫Øt biased locking ‚Üí gi·∫£m overhead lock/unlock nhi·ªÅu l·∫ßn
-XX:+UseNUMAChunkInterleaving 			# Ph√¢n ph·ªëi memory t·ªët h∆°n tr√™n h·ªá NUMA (multi-socket)
-XX:InlineSmallCode=1000			#TƒÉng ng∆∞·ª°ng inline code nh·ªè, gi√∫p JIT t·ªëi ∆∞u t·ªët h∆°n.
-XX:+OptimizeStringConcat			#T·ªëi ∆∞u n·ªëi chu·ªói, h·ªØu √≠ch khi c√≥ nhi·ªÅu thao t√°c string li√™n quan ƒë·∫øn chunk data.
-XX:+UseJNICriticalNatives			#Zero-copy JNI, crash n·∫øu sai
-XX:+UseClMulIntrinsics				#D√πng carry-less multiply (CLMUL)
-XX:+EnableContended -XX:-RestrictContended 	#T·ªëi ∆∞u cho c√°c tr∆∞·ªùng @Contended trong Java ƒë·ªÉ tr√°nh false sharing
-XX:+StressLCM					#Kh√¥ng n√™n d√πng l√¢u d√†i, h·ªØu √≠ch ƒë·ªÉ debug bottleneck trong hot loop
-XX:+StressGCM					#Test th·ª≠ t·∫•t c·∫£ l·ª±a ch·ªçn,√©p code gen sinh m√£ t·ªëi ƒëa ƒë·ªÉ t√¨m l·ªói ho·∫∑c leak hi·ªáu nƒÉng.
-XX:+UseVectorStubs				# Cho ph√©p d√πng native stub cho vector operation chx ƒëc intrinsified.
-XX:+UseSuperWordLoopUnrollAnalysis		# +UseSuperWord (c√≥ th·ªÉ b·ªã xung ƒë·ªôt n·∫øu build kh√¥ng h·ªó tr·ª£ c·∫£ hai r√µ r√†ng)
-XX:+OverrideVMProperties			# Cho ph√©p JVM ghi ƒë√® (override) c√°c property ho·∫∑c c·∫•u h√¨nh VM khi kh·ªüi ƒë·ªông.
-XX:+OptoScheduling				# B·∫≠t ho·∫∑c t·∫Øt l·∫≠p l·ªãch (scheduling) c√°c t√°c v·ª• t·ªëi ∆∞u h√≥a trong tr√¨nh bi√™n d·ªãch C2 (server compiler).
-XX:+PerfBypassFileSystemCheck			#B·∫≠t t√≠nh nƒÉng b·ªè qua ki·ªÉm tra h·ªá th·ªëng file (file system check) cho PerfData trong JVM.
-XX:+PerfAllowAtExitRegistration		#Cho ph√©p JVM ƒëƒÉng k√Ω (register) c√°c hook ho·∫∑c callback PerfData ƒë·ªÉ th·ª±c hi·ªán khi JVM tho√°t (at exit).
-XX:+InlineVirtualCalls                   	# Inline c·∫£ call ·∫£o n·∫øu ƒëo√°n ƒë∆∞·ª£c target
-XX:+UseCHA
-XX:-TieredCompilation				#N·∫øu b·∫°n mu·ªën √©p th·∫≥ng C2 lu√¥n, kh√¥ng c·∫ßn C1
-XX:+UseJVMCINativeLibrary			#Cho JVM bi·∫øt l√† b·∫°n mu·ªën d√πng Graal JIT ƒë√£ ƒë∆∞·ª£c bi√™n d·ªãch s·∫µn d∆∞·ªõi d·∫°ng native shared library
-XX:TieredStopAtLevel=1				#D·ª´ng tiered compilation ·ªü level 1 (t·ª©c l√† ch·ªâ d√πng C1 compiler ho·∫∑c Graal JIT ·ªü "shallow" tier).







üóëÔ∏è T·ªëi ∆∞u GC
-XX:+UseShenandoahGC				#N·∫øu b·∫°n mu·ªën th·ª≠ GC kh√°c ngo√†i ZGC, nh∆∞ng ZGC v·∫´n l√† t·ªëi ∆∞u
-XX:+UseEpsilonGC				#N·∫øu b·∫°n mu·ªën th·ª≠ GC kh√°c ngo√†i ZGC, nh∆∞ng ZGC v·∫´n l√† t·ªëi ∆∞u
-XX:+ShenandoahUncommit				#T·ª± ƒë·ªông b·ªè page RAM kh√¥ng d√πng (Shenandoah only).
-XX:+ShenandoahHumongousMoves			#T·ªëi ∆∞u copy object l·ªõn trong Shenandoah.
-XX:+ShenandoahRegionSampling			#B·∫≠t th·ªëng k√™ v√πng heap khi GC (debug performance).
-XX:+DisableExplicitGCOnSystemGC		#NgƒÉn System.gc() t·ª´ ch√≠nh JVM (Java 17+).



üóëÔ∏è T·ªëi ∆∞u ZGC (Low latency GC cho RAM l·ªõn)
-XX:+UseZGC 					# B·∫≠t Z Garbage Collector
-XX:ZUncommitDelay=10000 			# Delay unmap page ch∆∞a d√πng l·∫°i (ms)
-XX:ZCollectionInterval=128 			# Kho·∫£ng c√°ch 2 l·∫ßn ch·∫°y ZGC
-XX:+ZProactive 				# Thu gom r√°c ch·ªß ƒë·ªông
-XX:+UseStringDeduplication 			# Gi·∫£m tr√πng chu·ªói trong memory
-XX:SoftMaxHeapSize=140G 			# Gi·ªõi h·∫°n "m·ªÅm" heap tr√°nh GC l·ªõn ƒë·ªôt ng·ªôt
-XX:+UseZStore					# Gi√∫p n√©n d·ªØ li·ªáu trong ZGC, ti·∫øt ki·ªám b·ªô nh·ªõ nhi·ªÅu h∆°n.
-XX:ParallelGCThreads=1				# Ch·ªâ ƒë·ªãnh s·ªë lu·ªìng GC c√≥ th·ªÉ t·ªët h∆°n trong m·ªôt s·ªë tr∆∞·ªùng h·ª£p
-XX:+ZGenerational				#(Zulu 21+ c√≥ th·ªÉ th·ª≠) B·∫≠t ch·∫ø ƒë·ªô ZGC th·∫ø h·ªá ‚Äì h·ªó tr·ª£ Eden + Old Gen.
-XX:+ZVerifyViews                		# (debug only, ch·ªâ test d√πng) ki·ªÉm tra l·∫°i v√πng nh·ªõ mapping ZGC
-XX:+UseTransparentHugePages    		# C√≥ th·ªÉ gi√∫p khi k·∫øt h·ª£p v·ªõi -XX:+UseLargePages
-XX:+InlineClassNatives				#Cho ph√©p inline native methods ph·ªï bi·∫øn (n·∫øu c√≥ stub).






üõ†Ô∏è T·ªëi ∆∞u th·ªùi gian h·ªá & locking
-XX:+UseFastUnorderedTimeStamps 		# D√πng RDTSC l·∫•y th·ªùi gian nhanh h∆°n
-XX:LockingMode=0 				# D√πng Thin Locking (kh√¥ng biased lock)

üß™ GC h·ªó tr·ª£ tham chi·∫øu song song
-XX:+ParallelRefProcEnabled 			# X·ª≠ l√Ω Reference song song (WeakRef, Finalizer...)

üö´ V√¥ hi·ªáu h√≥a GC ngo√†i √Ω mu·ªën & Graal
-XX:+DisableExplicitGC 				# Ch·∫∑n System.gc() t·ª´ mod b√™n th·ª© 3
-XX:+UseGraalJIT 				# T·∫Øt Graal n·∫øu b·∫°n mu·ªën √©p JVM d√πng C2 truy·ªÅn th·ªëng

üìä Ghi log & theo d√µi hi·ªáu nƒÉng
-Xlog:gc*,safepoint:file=gc.log:tags,uptime,time,level 	# Ghi log GC v√† d·ª´ng m√°y
-XX:+PrintCompilation 					# Hi·ªÉn th·ªã log khi JIT compile method n√†o
-XX:+PrintFlagsFinal					# Ghi to√†n b·ªô flags th·ª±c t·∫ø JVM s·ª≠ d·ª•ng, ƒë·ªÉ log/debug
-XX:+HeapDumpOnOutOfMemoryError				# Dump heap n·∫øu crash OOM ‚Äì debug mod d·ªÖ h∆°n
-XX:+PrintInlining					# Mu·ªën theo d√µi inline method n√†o khi JIT?
-XX:+PerfDisableSharedMem				# C√≥ th·ªÉ th·ª≠ n·∫øu kh√¥ng d√πng c√°c tool monitoring d√πng PerfData
-XX:+UnlockJavaMonitoringAndManagement
-XX:+PrintAssembly
-XX:+TraceLinearScanLevel		 #Log n·ªôi b·ªô b·ªô ph√¢n register allocator LinearScan.
-XX:+PrintCFGToFile			 #Xu·∫•t control flow graph ƒë·ªÉ debug JIT code gen.
-XX:+PrintOptoAssembly			 #In c·∫£ m√£ m√°y t·ªëi ∆∞u c·ªßa C2 ‚Äì c·ª±c n·∫∑ng, nh∆∞ng c·ª±c k·ª≥ chi ti·∫øt.
-XX:+PrintIRWithLIRGraphs		 #N·∫øu test Graal, in IR trung gian.
-XX:+TraceDeoptimization		 #Log khi m·ªôt method b·ªã deoptimize ‚Üí r·∫•t quan tr·ªçng n·∫øu c√≥ native agent can thi·ªáp
-XX:+LogCompilation			 #Output XML file to√†n b·ªô h√†nh vi JIT + compile graph.
-XX:+TraceOSR				 #N·∫øu b·∫°n ƒëang benchmark loop n√†o b·ªã OSR (On Stack Replacement).
-XX:+PrintInliningDetailed               # In chi ti·∫øt to√†n b·ªô c√°c h√†m ƒë∆∞·ª£c inline trong JIT (m·ªü r·ªông h∆°n -XX:+PrintInlining)
-XX:+AbortVMOnSafepointTimeout           # JVM s·∫Ω d·ª´ng (crash) n·∫øu safepoint b·ªã treo qu√° l√¢u (h·ªØu √≠ch khi debug v·∫•n ƒë·ªÅ treo)
-XX:+AbortVMOnVMOperationTimeout         # JVM s·∫Ω d·ª´ng n·∫øu m·ªôt thao t√°c n·ªôi b·ªô (VMOperation) b·ªã timeout (ph√≤ng l·ªói treo c·ª©ng)
-XX:+CreateCoredumpOnCrash               # T·∫°o file core dump khi JVM crash (ph√¢n t√≠ch l·ªói native ho·∫∑c crash s√¢u)
-XX:+DebugNonSafepoints                  # In log chi ti·∫øt t·∫°i c√°c ƒëi·ªÉm kh√¥ng ph·∫£i safepoint (d√πng ƒë·ªÉ debug h√†nh vi thread)
-XX:+DisplayVMOutputToStderr             # Cho ph√©p JVM in log n·ªôi b·ªô ra stderr (h·ªØu √≠ch khi g·ª° l·ªói)
-XX:+DisplayVMOutputToStdout             # Cho ph√©p JVM in log n·ªôi b·ªô ra stdout
-XX:+DumpReplayDataOnError               # Ghi l·∫°i d·ªØ li·ªáu bi√™n d·ªãch (JIT replay) khi g·∫∑p l·ªói ƒë·ªÉ ph√¢n t√≠ch l·∫°i sau
-XX:+EnableThreadSMRStatistics           # B·∫≠t th·ªëng k√™ v·ªÅ Thread Safe Memory Reclamation (SMR), d√πng ƒë·ªÉ ph√¢n t√≠ch h·ªá th·ªëng thread
-XX:+ExtensiveErrorReports               # B·∫≠t ch·∫ø ƒë·ªô ghi log l·ªói n√¢ng cao v√† ƒë·∫ßy ƒë·ªß h∆°n khi JVM g·∫∑p s·ª± c·ªë
-XX:+ExitOnOutOfMemoryError              # JVM s·∫Ω tho√°t ngay khi b·ªã OutOfMemoryError (tr√°nh b·ªã treo kh√¥ng h·ªìi ph·ª•c)
-XX:+IgnoreEmptyClassPaths               # B·ªè qua c√°c classpath r·ªóng trong classpath string
-XX:+IgnoreUnrecognizedVMOptions         # JVM s·∫Ω kh√¥ng b√°o l·ªói n·∫øu g·∫∑p c√°c flag kh√¥ng h·ª£p l·ªá (d·ªÖ test flag m·ªõi)
-XX:+HeapDumpAfterFullGC                 # T·∫°o heap dump sau khi GC to√†n b·ªô (full GC), ph·ª•c v·ª• ph√¢n t√≠ch memory
-XX:+HeapDumpBeforeFullGC                # T·∫°o heap dump tr∆∞·ªõc khi full GC ch·∫°y
-XX:+FlightRecorder                      # B·∫≠t Java Flight Recorder ƒë·ªÉ theo d√µi h√†nh vi runtime (nh∆∞ profiler t√≠ch h·ª£p c·ªßa JVM)
-XX:+BootstrapJVMCI                      # Cho ph√©p load tr√¨nh bi√™n d·ªãch JVMCI khi kh·ªüi ƒë·ªông JVM (d√πng cho GraalVM)
-XX:+EnableJVMCI                         # B·∫≠t compiler interface JVMCI (cho Graal ho·∫∑c c√°c JIT kh√°c)
-XX:+EnableJVMCIProduct                  # B·∫≠t c√°c t√≠nh nƒÉng JVMCI ·ªü m√¥i tr∆∞·ªùng production (t·ªëi ∆∞u hi·ªáu nƒÉng)
-XX:+CheckJNICalls                       # Ki·ªÉm tra nghi√™m ng·∫∑t c√°c g·ªçi JNI, gi√∫p ph√°t hi·ªán misuse ho·∫∑c l·ªói native code
-XX:+ExecutingUnitTests                  # ƒê√°nh d·∫•u JVM ƒëang ch·∫°y unit test (d√†nh cho testing n·ªôi b·ªô ho·∫∑c CI)
-XX:+AggressiveHeap                      # B·∫≠t ch·∫ø ƒë·ªô memory aggressive: m·ªü r·ªông heap t·ªëi ƒëa, preload m·ªçi th·ª© ‚Äì ch·ªâ n√™n d√πng khi test benchmark
-XX:+AllowArchivingWithJavaAgent         #Cho ph√©p dump Class Data Sharing(CDS) archive ngay c·∫£ khi JVM ch·∫°y v·ªõi Java Agent(JVM ch·∫∑n ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh ·ªïn ƒë·ªãnh)
-XX:+AllowRedefinitionToAddDeleteMethods # Cho ph√©p redefine class b·∫±ng c√°ch th√™m ho·∫∑c x√≥a method ‚Äì h·ªØu √≠ch v·ªõi agent hot reload n√¢ng cao (ByteBuddy...
-XX:+AllowUserSignalHandlers             # Cho ph√©p ·ª©ng d·ª•ng b·∫Øt t√≠n hi·ªáu h·ªá th·ªëng nh∆∞ SIGTERM SIGSEGV-d√πng cho debugger profiler ho·∫∑c ·ª©ng d·ª•ng ƒë·∫∑c bi·ªát
-XX:+AutoCreateSharedArchive             # JVM t·ª± t·∫°o CDS archive khi kh·ªüi ƒë·ªông ‚Äì ti·ªán l·ª£i nh∆∞ng c√≥ th·ªÉ xung ƒë·ªôt n·∫øu agent thay ƒë·ªïi h√†nh vi class
-XX:+AzCRSFailJVMOnError                 # JVM s·∫Ω crash n·∫øu h·ªá th·ªëng AzCRS g·∫∑p l·ªói (ch·ªâ c√≥ tr√™n JVM c·ªßa Azul ‚Äì kh√¥ng ·∫£nh h∆∞·ªüng c√°c b·∫£n OpenJDK chu·∫©n)
-XX:+CompilerDirectivesIgnoreCompileCommands #B·ªè c√°c ch·ªâ th·ªã compile t·ª´ file directive d√πng khi b·∫°n mu·ªën JVM t·ª± t·ªëi ∆∞u m√† kh√¥ng b·ªã √©p theo config b√™n ngo√†i
-XX:+CIPrintCompileQueue                 # In th√¥ng tin h√†ng ch·ªù JIT compile ‚Äì h·ªØu √≠ch ƒë·ªÉ debug hi·ªáu su·∫•t compile th·ªùi gian th·ª±c
-XX:+CIPrintCompilerName                 # In t√™n compiler (C1/C2) khi bi√™n d·ªãch method ‚Äì d√πng ƒë·ªÉ ph√¢n t√≠ch h√†nh vi t·ªëi ∆∞u JIT
-XX:+CITime                              # In th·ªùi gian bi√™n d·ªãch t·ª´ng method b·ªüi JIT ‚Äì d√πng ƒë·ªÉ x√°c ƒë·ªãnh bottleneck compile
-XX:+DisableAttachMechanism              # C·∫•m c√°c tool nh∆∞ VisualVM, jcmd... attach v√†o JVM ‚Äì tƒÉng b·∫£o m·∫≠t, tr√°nh b·ªã ch√®n agent t·ª´ b√™n ngo√†i
-XX:+DisablePrimordialThreadGuardPages   # T·∫Øt guard page cho thread ƒë·∫ßu ti√™n ‚Äì c√≥ th·ªÉ ti·∫øt ki·ªám ch√∫t b·ªô nh·ªõ, nh∆∞ng gi·∫£m an to√†n khi stack overflow
-XX:+EnableDynamicAgentLoading           #Cho ph√©p load agent trong l√∫c JVM ƒëang ch·∫°y h·ªØu √≠ch cho debug nh∆∞ng ti·ªÅm ·∫©n r·ªßi ro b·∫£o m·∫≠t n·∫øu kh√¥ng ki·ªÉm so√°t
-XX:+EnableAsyncStackTrace		 #Cho ph√©p thu th·∫≠p async stack trace (h·ªØu √≠ch khi debug thread ho·∫∑c Agent injection nh∆∞ b·∫°n ƒëang l√†m)
-XX:+ProfileVM				 #Cho ph√©p JVM t·ª± profile ch√≠nh m√¨nh ‚Äî h·ªØu √≠ch khi debug bottleneck VM-level.
-XX:+PauseAtExit			 #Khi b·∫≠t, JVM s·∫Ω t·∫°m d·ª´ng (pause) tr∆∞·ªõc khi tho√°t (exit) sau khi ch∆∞∆°ng tr√¨nh k·∫øt th√∫c.
-XX:+PauseAtStartup			 #Khi b·∫≠t, JVM s·∫Ω t·∫°m d·ª´ng (pause) ngay khi kh·ªüi ƒë·ªông (startup), tr∆∞·ªõc khi ch·∫°y code ch√≠nh.
-XX:+PreserveAllAnnotations		 #B·∫≠t t√≠nh nƒÉng gi·ªØ l·∫°i t·∫•t c·∫£ annotation trong bytecode trong qu√° tr√¨nh bi√™n d·ªãch ho·∫∑c x·ª≠ l√Ω JVM.
-XX:+PerfDataSaveToFile			 #B·∫≠t t√≠nh nƒÉng l∆∞u d·ªØ li·ªáu PerfData (d·ªØ li·ªáu hi·ªáu nƒÉng JVM) v√†o file khi JVM k·∫øt th√∫c.
-XX:+PreferInterpreterNativeStubs	 #B·∫≠t t√πy ch·ªçn ƒë·ªÉ JVM ∆∞u ti√™n s·ª≠ d·ª•ng c√°c native stubs d√†nh cho interpreter 
-XX:+PrintAdapterHandlers		 #In ra th√¥ng tin chi ti·∫øt v·ªÅ c√°c adapter handler ƒë∆∞·ª£c JVM t·∫°o ra ƒë·ªÉ n·ªëi (bridge) gi·ªØa c√°c ph·∫ßn code kh√°c nhau 
-XX:+PrintClassHistogram		#In th·ªëng k√™ s·ªë l∆∞·ª£ng object theo class ƒëang t·ªìn t·∫°i trong heap.
-XX:+PrintCodeCache			#In th√¥ng tin t·ªïng quan v·ªÅ b·ªô nh·ªõ code cache ‚Äì n∆°i l∆∞u tr·ªØ JIT-compiled code.
-XX:+PrintCodeCacheOnCompilation	# M·ªói l·∫ßn bi√™n d·ªãch JIT, in th√™m th√¥ng tin v·ªÅ CodeCache.
-XX:+PrintCodeHeapAnalytics		#In ph√¢n t√≠ch chi ti·∫øt v·ªÅ t·ª´ng heap trong CodeCache (non-profiled, profiled, non-method...).
-XX:+PrintCommandLineFlags		# In ra t·∫•t c·∫£ c√°c flag JVM ƒë∆∞·ª£c set khi kh·ªüi ƒë·ªông (bao g·ªìm m·∫∑c ƒë·ªãnh, user-defined v√† ergonomic).
-XX:+PrintCompilation2			#M·ªü r·ªông th√™m chi ti·∫øt so v·ªõi PrintCompilation, nh∆∞ call site, method caller/callee.
-XX:+PrintConcurrentLocks		#In t·∫•t c·∫£ c√°c lock ƒëang ƒë∆∞·ª£c gi·ªØ b·ªüi t·ª´ng thread trong qu√° tr√¨nh thread dump.
-XX:+PrintExtendedThreadInfo		#M·ªü r·ªông th√¥ng tin v·ªÅ thread khi t·∫°o thread dump (jstack, jcmd Thread.print), bao g·ªìm locks, CPU time, v.v.
-XX:+PrintFlagsInitial			#In to√†n b·ªô flag c√πng gi√° tr·ªã kh·ªüi ƒë·∫ßu
-XX:+PrintFlagsRanges			#In ph·∫°m vi h·ª£p l·ªá (range) c·ªßa t·ª´ng flag
-XX:+PrintVMOptions			#In danh s√°ch VM options ƒëang d√πng
-XX:+PrintGC				#In log GC ƒë∆°n gi·∫£n (n·ªôi dung m·ªói l·∫ßn GC)
-XX:+PrintGCDetails			#In log GC chi ti·∫øt h∆°n
-XX:+PrintHeapAtSIGBREAK		#In th√¥ng tin heap khi nh·∫•n Ctrl+\ (ho·∫∑c g·ª≠i SIGBREAK)
-XX:+PrintInlining			#In th√¥ng tin inline c·ªßa JIT C2
-XX:+PrintInterpreter			#In th√¥ng tin interpreter loop
-XX:+PrintIntrinsics			#In danh s√°ch intrinsic ƒë∆∞·ª£c d√πng
-XX:+PrintMethodData			#In d·ªØ li·ªáu profiling method (tr∆∞·ªõc khi JIT)
-XX:+PrintOptoAssembly			#In asm sau khi t·ªëi ∆∞u (JIT C2)
-XX:+PrintNMethods			#In danh s√°ch method ƒë∆∞·ª£c JIT h√≥a
-XX:+StressIncrementalInlining		#TƒÉng ƒë·ªô che ph·ªß ki·ªÉm th·ª≠ (stress test) ƒë·ªÉ ƒë·∫£m b·∫£o r·∫±ng incremental inlining ho·∫°t ƒë·ªông ƒë√∫ng trong c√°c ƒëi·ªÅu ki·ªán ph·ª©c t·∫°p.
-XX:+TraceSpilling			#In ra log chi ti·∫øt v·ªÅ c√°c quy·∫øt ƒë·ªãnh li√™n quan ƒë·∫øn spilling register trong qu√° tr√¨nh bi√™n d·ªãch t·ªëi ∆∞u v·ªõi C2.
-XX:AllocatePrefetchLines=1		#S·ªë d√≤ng cache ƒë∆∞·ª£c prefetch sau m·ªói c·∫•p ph√°t object.
-XX:AllocatePrefetchStyle=1		#C√°ch prefetch: 0 = t·∫Øt, 1 = sau m·ªói c·∫•p ph√°t, 2 = th√¥ng minh h∆°n d·ª±a tr√™n TLAB.
-XX:+UseXMMForObjInit			#Khi b·∫≠t true, c√≥ th·ªÉ gi√∫p c·∫£i thi·ªán hi·ªáu su·∫•t trong ·ª©ng d·ª•ng Java t·∫°o nhi·ªÅu object ng·∫Øn s·ªëng
-XX:+TrapBasedNullChecks		# C√≥ th·ªÉ gi√∫p tƒÉng hi·ªáu nƒÉng trong C2, gi·∫£m branch.
-XX:+TrapBasedRangeChecks		#Nh·∫°y c·∫£m h∆°n v√¨ d·ªÖ crash n·∫øu c√≥ l·ªói logic (v√≠ d·ª• JNI ho·∫∑c C++ vi·∫øt sai).
-XX:+DisableAttachMechanism
-XX:-RelaxAccessControlCheck		#Tr√°nh JVM n·ªõi l·ªèng check access field/method ‚Üí tƒÉng b·∫£o m·∫≠t, gi·∫£m x·ª≠ l√Ω meta
-XX:-DebugNonSafepoints 		#G·ª° profiling t·ª´ng v·ªã tr√≠ trong method ‚Üí nh·∫π h∆°n
-XX:-AllowUserSignalHandlers 		#Gi·∫£m chi ph√≠ signal dispatch, tƒÉng hi·ªáu su·∫•t long-run
-XX:-TraceClassLoading
-XX:-TraceClassUnloading		#Kh√¥ng log class load/unload
-XX:+OptoBundling                       #(tƒÉng hi·ªáu su·∫•t JIT loop bundles)
-XX:+OptoScheduling                     #(t·ªëi ∆∞u l·ªánh m√°y)







‚öôÔ∏è Fix & config c√°c l·ªói Minecraft mod
-Dfml.ignoreInvalidMinecraftCertificates=true 				# Forge fix l·ªói ch·ª©ng ch·ªâ
-Dfml.ignorePatchDiscrepancies=true 					# B·ªè qua ch√™nh l·ªách patch Forge
-Djava.net.preferIPv4Stack=true 					# D√πng IPv4 thay IPv6 (·ªïn ƒë·ªãnh h∆°n)
-XX:+EnableDynamicAgentLoading 						# T·∫Øt cho ph√©p agent runtime n·∫øu kh√¥ng c·∫ßn
-javaagent:D:\Agent\multicpu_agent.jar 					# Agent ƒëa lu·ªìng t√πy bi·∫øn b·∫°n vi·∫øt
-Djava.util.concurrent.ForkJoinPool.common.parallelism=72		#T·ªëi ∆∞u parallelism n·∫øu modpack d√πng ForkJoin
-Dio.netty.recycler.maxCapacityPerThread=0				#T·∫Øt cache Netty n·∫øu b·ªã memory leak do mod network
-Dgraal.ExplicitUnsafe=true						#T·ªëi ∆∞u truy c·∫≠p Unsafe, khi vi·∫øt mod ho·∫∑c agent native.
-Dgraal.CompileThreads=24						#T·ªëi ∆∞u thread bi√™n d·ªãch cho GraalVM n·∫øu c√≥ th·ª≠.
-Dforge.logging.file.level=OFF						#T·ª± redirect console log (n·∫øu kh√¥ng c·∫ßn ghi file)
-Dforge.logging.console.level=WARN -Dforge.logging.markers=false	#Ch·ªâ c√≤n log t·ª´ WARN, ERROR, FATAL ƒë∆∞·ª£c hi·ªÉn th·ªã ‚Üí INFO b·ªã ·∫©n.
-Dfml.networkconnection.maxpacketsize=31457280
-Dfml.readTimeout=120
-Dfml.queryResultTimeout=120



üî¢ C√ÅC JVM FLAG C√ì GI√Å TR·ªä S·ªê
‚ûï Vi·∫øt d·∫°ng -XX:<Flag>=<value>
-XX:AVX3Threshold=4096                    	# Ng∆∞·ª°ng t·ªëi thi·ªÉu (byte) ƒë·ªÉ JIT k√≠ch ho·∫°t AVX-512 SIMD, n√™n gi·∫£m n·∫øu CPU h·ªó tr·ª£ t·ªët
-XX:AbortVMOnVMOperationTimeoutDelay=1000 	# Th·ªùi gian t·ªëi ƒëa (ms) cho 1 VM operation tr∆∞·ªõc khi JVM crash (n·∫øu b·∫≠t AbortVMOnVMOperationTimeout)
-XX:ActiveProcessorCount=72              	# S·ªë l∆∞·ª£ng lu·ªìng logic JVM s·ª≠ d·ª•ng (72 threads), ph√π h·ª£p m√°y nhi·ªÅu nh√¢n
-XX:AdaptiveSizeDecrementScaleFactor=4   	# Th√¥ng s·ªë ƒëi·ªÅu ch·ªânh t·ªëc ƒë·ªô thu nh·ªè heap trong GC adapt
-XX:AdaptiveSizeMajorGCDecayTimeScale=10 	# T·ªëc ƒë·ªô l√†m m∆∞·ª£t t√≠nh to√°n GC major size, ·∫£nh h∆∞·ªüng t√≠nh adapt
-XX:AllocateInstancePrefetchLines=1      	# S·ªë cache line s·∫Ω prefetch khi new object, gi√∫p tƒÉng t·ªëc c·∫•p ph√°t
-XX:AllocatePrefetchDistance=256         	# Kho·∫£ng c√°ch prefetch (byte) gi·ªØa prefetch v√† ƒëi·ªÉm truy c·∫≠p th·∫≠t, t·ªëi ∆∞u CPU cache
-XX:AllocatePrefetchLines=3              	# Bao nhi√™u d√≤ng cache n√™n prefetch tr∆∞·ªõc, tƒÉng hi·ªáu nƒÉng memory access
-XX:AllocatePrefetchStepSize=4           	# B∆∞·ªõc nh·∫£y gi·ªØa c√°c prefetch line, k·∫øt h·ª£p c√πng c√°c flag tr√™n
-XX:ArchiveRelocationMode=1              	# Ch·∫ø ƒë·ªô di chuy·ªÉn archive v√πng CDS, 1 = dynamic mode
-XX:ArrayCopyLoadStoreMaxElem=8          	# Gi·ªõi h·∫°n ph·∫ßn t·ª≠ khi sao ch√©p m·∫£ng b·∫±ng intrinsic load/store, tr√°nh JIT sinh code qu√° l·ªõn
-XX:AsyncDeflationInterval=250           	# Kho·∫£ng th·ªùi gian ki·ªÉm tra deflation monitor (ms), ·∫£nh h∆∞·ªüng ƒë·∫øn lock management
-XX:AsyncLogBufferSize=2097152           	# K√≠ch th∆∞·ªõc b·ªô ƒë·ªám log async, 2MB, tƒÉng s·∫Ω tr√°nh m·∫•t log trong ·ª©ng d·ª•ng nhi·ªÅu lu·ªìng
-XX:AutoBoxCacheMax=128                  	# Gi·ªõi h·∫°n cache cho Integer.valueOf,Long.valueOf th∆∞·ªùng ƒë·ªÉ m·∫∑c ƒë·ªãnh ho·∫∑c tƒÉng nh·∫π n·∫øu d√πng nhi·ªÅu boxing
-XX:AvgMonitorsPerThreadEstimate=1024    	# ∆Ø·ªõc l∆∞·ª£ng s·ªë l∆∞·ª£ng lock monitor m·ªói thread, ·∫£nh h∆∞·ªüng pre-alloc
-XX:CICompilerCount=36                   	# S·ªë lu·ªìng JIT compiler (C2), gi√∫p compile nhanh h∆°n tr√™n CPU nhi·ªÅu nh√¢n
-XX:CodeCacheExpansionSize=65536         	# Khi code cache ƒë·∫ßy, JVM s·∫Ω m·ªü r·ªông th√™m bao nhi√™u byte (64KB), ·∫£nh h∆∞·ªüng ƒë·∫øn JIT stability
-XX:CompileThreshold=1500                	# S·ªë l·∫ßn method ƒë∆∞·ª£c g·ªçi tr∆∞·ªõc khi JIT compile (gi·∫£m = compile s·ªõm h∆°n, tƒÉng = compile tr·ªÖ h∆°n)
-XX:CompilerThreadPriority=-1            	# ∆Øu ti√™n lu·ªìng JIT compile (Linux: -1 l√† ∆∞u ti√™n th·∫•p)
-XX:CompilerDirectivesLimit=50           	# S·ªë l∆∞·ª£ng ch·ªâ th·ªã directive t·ªëi ƒëa m√† JIT s·ª≠ d·ª•ng
-XX:EliminateAllocationArraySizeLimit=64 	# Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc array m√† JVM c√≥ th·ªÉ ph√¢n t√≠ch ƒë·ªÉ b·ªè c·∫•p ph√°t object
-XX:EliminateAllocationFieldsLimit=512   	# Gi·ªõi h·∫°n s·ªë tr∆∞·ªùng c·ªßa object ƒë·ªÉ lo·∫°i b·ªè c·∫•p ph√°t, ·∫£nh h∆∞·ªüng escape analysis
-XX:EpsilonMaxTLABSize=4194304           	# Gi·ªõi h·∫°n TLAB (thread-local allocation buffer) trong GC Epsilon, 4MB
-XX:EpsilonMinHeapExpand=134217728       	# Ng∆∞·ª°ng ƒë·ªÉ m·ªü r·ªông heap trong Epsilon GC, 128MB
-XX:EpsilonTLABDecayTime=1000            	# Th·ªùi gian decay ƒë·ªÉ ƒëi·ªÅu ch·ªânh TLAB allocation, 1 gi√¢y
-XX:EpsilonUpdateCountersStep=1048576    	# C·ª© m·ªói 1MB c·∫•p ph√°t, GC Epsilon update th·ªëng k√™ heap
-XX:ErrorLogTimeout=120                  	# Gi·ªØ JVM t·∫°m ng·ª´ng t·ªëi ƒëa 120 gi√¢y ƒë·ªÉ ghi log l·ªói n·∫øu c√≥ l·ªói nghi√™m tr·ªçng
-XX:EscapeAnalysisTimeout=20             	# Th·ªùi gian t·ªëi ƒëa (ms) ƒë·ªÉ th·ª±c hi·ªán Escape Analysis (d√πng cho ph√¢n t√≠ch b·ªè c·∫•p ph√°t)
-XX:G1ConcMarkStepDurationMillis=10      	# Gi·ªõi h·∫°n th·ªùi gian cho m·ªói b∆∞·ªõc concurrent mark trong G1GC (ms)
-XX:G1PeriodicGCSystemLoadThreshold=0.0  	# Ng∆∞·ª°ng CPU load ƒë·ªÉ G1GC quy·∫øt ƒë·ªãnh ch·∫°y periodic GC (0 = lu√¥n ch·∫°y n·∫øu c·∫ßn)
-XX:G1RebuildRemSetChunkSize=262144      	# K√≠ch th∆∞·ªõc m·ªói chunk khi rebuild remembered set (GC metadata)
-XX:HeapBaseMinAddress=2147483648        	# ƒê·ªãa ch·ªâ base c·ªßa heap t·ªëi thi·ªÉu, h·ªó tr·ª£ NUMA v√† randomization t·ªët h∆°n (2GB)
-XX:HeapSizePerGCThread=43620760         	# Heap ƒë∆∞·ª£c chia ƒë·ªÅu cho m·ªói lu·ªìng GC (~41.6MB m·ªói thread)
-XX:InitialHeapSize=536870912            	# K√≠ch th∆∞·ªõc heap kh·ªüi t·∫°o, 512MB
-XX:LargePageSizeInBytes=2097152         	# K√≠ch th∆∞·ªõc trang b·ªô nh·ªõ l·ªõn (huge pages), 2MB ‚Äì ch·ªâ d√πng n·∫øu h·ªá ƒëi·ªÅu h√†nh h·ªó tr·ª£
-XX:LoopMaxUnroll=32                     	# S·ªë v√≤ng l·∫∑p t·ªëi ƒëa JVM cho ph√©p "m·ªü v√≤ng" (unroll) trong compile
-XX:LoopUnrollLimit=256                  	# K√≠ch th∆∞·ªõc loop ƒë·ªß nh·ªè s·∫Ω ƒë∆∞·ª£c unroll ƒë·ªÉ tƒÉng hi·ªáu nƒÉng
-XX:MaxInlineLevel=15                    	# S·ªë c·∫•p ƒë·ªô call stack m√† JVM cho ph√©p inline, c√†ng cao c√†ng t·ªëi ∆∞u nh∆∞ng t·ªën code cache
-XX:MaxRAM=137438953472                  	# Gi·ªõi h·∫°n RAM t·ªëi ƒëa JVM c√≥ th·ªÉ d√πng (128GB)
-XX:MaxRAMPercentage=25.0                	# JVM d√πng t·ªëi ƒëa 25% t·ªïng RAM n·∫øu kh√¥ng ch·ªâ ƒë·ªãnh Xmx
-XX:MinHeapSize=536870912                	# Heap nh·ªè nh·∫•t JVM ƒë∆∞·ª£c ph√©p gi·∫£m xu·ªëng (512MB)
-XX:ReservedCodeCacheSize=536870912      	# K√≠ch th∆∞·ªõc v√πng cache code c·ªßa JIT (512MB), ·∫£nh h∆∞·ªüng t·ªëc ƒë·ªô compile v√† inline
-XX:MaxInlineSize=100               	        # TƒÉng size t·ªëi ƒëa c·ªßa method ƒë·ªÉ ƒë∆∞·ª£c inline (m·∫∑c ƒë·ªãnh 35)
-XX:FreqInlineSize=325                    	# TƒÉng size t·ªëi ƒëa cho method g·ªçi th∆∞·ªùng xuy√™n ƒë·ªÉ inline
-XX:InlineFrequencyCount=10000            	# M·ª©c g·ªçi t·ªëi thi·ªÉu ƒë·ªÉ xem l√† "frequent" (tƒÉng ƒë·ªÉ h·ªó tr·ª£ FreqInline)
-XX:MaxRecursiveInlineLevel=3			#Cho ph√©p inline ƒë·ªá quy t·ªëi ƒëa (default 1 ho·∫∑c 2)





üî¨ 2. GraalVM / JVMCI-specific Flag (n·∫øu b·∫°n test Graal ho·∫∑c b·∫≠t -XX:+EnableJVMCI)
-Dgraal.UseSVE=true			#D√†nh cho ARMv8 SVE (n·∫øu b·∫°n test native vector JIT future).
-Dgraal.OptMacroFusion=true		#T·ªëi ∆∞u instruction fusion trong JIT (Graal).
-Dgraal.OptAvoidSpeculation=true	#Tr√°nh speculative branch trong code JIT ‚Äì gi·∫£m overhead multi-core render.
-XX:+JVMCIPrintProperties		#Li·ªát k√™ to√†n b·ªô option m√† JVMCI/Graal c√≥ th·ªÉ d√πng.



üß∞ Nh·ªØng flag "kh√¥ng flags" ‚Äì nh∆∞ng ƒë√°ng test th√™m:
-Xbatch 				#T·∫Øt ch·∫ø ƒë·ªô bi√™n d·ªãch n·ªÅn, compile ngay (d√πng ƒë·ªÉ benchmark ch√≠nh x√°c JIT).
-Xcomp 					#Compile to√†n b·ªô code, kh√¥ng d√πng interpreter (benchmark hotpath).
-Xverify:none 				#T·∫Øt bytecode verifier ‚Üí gi·∫£m startup time.
-XX:+UseStringLatin1 			#D√πng compact String UTF8-Latin1 (gi·∫£m RAM n·∫øu chu·ªói kh√¥ng c√≥ k√Ω t·ª± Unicode cao).
-Dsun.java2d.opengl=true		#Gi√∫p Minecraft ∆∞u ti√™n OpenGL h∆°n D3D khi JVM x·ª≠ l√Ω h√¨nh ·∫£nh.
-Dsun.java2d.d3d=false			#Gi√∫p Minecraft ∆∞u ti√™n OpenGL h∆°n D3D khi JVM x·ª≠ l√Ω h√¨nh ·∫£nh.
-Dorg.lwjgl.opengl.Display.allowSoftwareOpenGL=false
-Dorg.lwjgl.system.allocator=jemalloc
-Diris.use-vbo=true
-Diris.shader-full-res=true



üîß C·ªï ƒëi·ªÉn & kh√¥ng c√≤n ph·ªï bi·∫øn, nh∆∞ng v·∫´n note l·∫°i cho ƒë·∫ßy ƒë·ªß
# Kh√¥ng c√≤n hi·ªáu l·ª±c, nh∆∞ng b·∫°n ghi ch√∫ ƒë·ªÉ tra c·ª©u n·∫øu mu·ªën th·ª≠ JVM c·ªï
-XX:+UseMMX                             # (JVM c≈©, kh√¥ng c√≤n h·ªó tr·ª£ sau Java 6)
-XX:+Use3DNOW                           # (AMD only, obsolete)
-XX:+UseVTune                           # (Intel VTune integration)
-XX:+UseG1GC                            # D√πng GC m·ªõi h∆°n ZGC
-XX:+UseBiasedLocking                   # Biased lock (ƒë√£ b·ªã x√≥a kh·ªèi JDK 17+)
-XX:+UseLegacyInlining			#D√πng h·ªá th·ªëng inline c≈© thay v√¨ m·ªõi ‚Äî ƒë√¥i khi t∆∞∆°ng th√≠ch h∆°n v·ªõi code injection ho·∫∑c agent inline s√¢u
-XX:-UseGCOverheadLimit			#JVM th∆∞·ªùng kill n·∫øu GC chi·∫øm qu√° 98% CPU ‚Üí t·∫Øt ƒë·ªÉ kh√¥ng kill qu√° s·ªõm trong build-heavy modpack
-XX:-VerifyOops				#B·ªè ki·ªÉm tra tham chi·∫øu object ‚Üí tƒÉng t·ªëc lookup, r·∫•t nguy hi·ªÉm n·∫øu mod l·ªói


‚öôÔ∏è 1. Flag Hi·∫øm C·ª±c ƒê·ªô ‚Äì Th∆∞·ªùng kh√¥ng c√≥ trong PrintFlagsFinal
-XX:+UseFastEmptyMethods		#TƒÉng t·ªëc c√°c method tr·ªëng (r·∫•t nh·∫π, nh∆∞ng c√≥ l·ª£i n·∫øu mod c√≥ nhi·ªÅu stub/trampoline method).
-XX:+UseFastClassInitChecks		#T·ªëi ∆∞u ki·ªÉm tra kh·ªüi t·∫°o class (ƒë·∫∑c bi·ªát class static-heavy).
-XX:+UseThreadCpuClocks			#D√πng ƒë·ªìng h·ªì CPU thay v√¨ wall-clock (gi·∫£m jitter profiling, test JVM x√°c ƒë·ªãnh bottleneck)
-XX:+EnableVectorUnrollLimit		#Gi√∫p vector h√≥a ch√≠nh x√°c h∆°n khi k·∫øt h·ª£p unroll loop + AVX2 (t√πy JVM build m·ªõi).
-XX:+UseSIMDForArrayCopy		#T·ªëi ∆∞u System.arraycopy() d√πng SIMD thay memcpy (r·∫•t hi·∫øm th·∫•y b·∫≠t s·∫µn).
-XX:+UseMicroLocking			#N·∫øu d√πng nhi·ªÅu lock nh·ªè (nh∆∞ lock t·ª´ng chunk ho·∫∑c thread-local), flag n√†y c·ª±c k·ª≥ h·ªØu √≠ch.
-XX:+InlineNotifyWait			#Inline ph·∫ßn th√¢n wait/notify n·∫øu c√≥ th·ªÉ ‚Äì c·ª±c hi·∫øm d√πng nh∆∞ng gi·∫£m context switch.



üì¶ B·ªô nh·ªõ t·ªëi ƒëa JVM
-Xmx160G 					# C·∫•p t·ªëi ƒëa b·ªô nh·ªõ heap (t∆∞∆°ng th√≠ch ZGC + LargePage)


üõ† G·ª£i √Ω n√¢ng cao (n·∫øu b·∫°n c·ª±c hardcore):
-XX:-SafepointTimeout 			#ƒë·ªÉ t·∫Øt gi·ªõi h·∫°n max safepoint wait.
-XX:-UseGCStartUpDiagnostics 		#n·∫øu kh√¥ng c·∫ßn ph√¢n t√≠ch GC kh·ªüi ƒë·∫ßu.
-XX:-SegmentedCodeCache 		#(OpenJDK 21+) ƒë·ªÉ gi·ªØ codecache 1 v√πng ‚Äî √≠t ph√¢n m·∫£nh h∆°n.
-XX:-RelaxAccessControlCheck		#G·ª° check quy·ªÅn truy c·∫≠p n·ªôi b·ªô class ‚Äì nh·∫π h∆°n
-XX:+ScavengeBeforeFullGC		#Th√™m d·ªçn Eden tr∆∞·ªõc full GC (c√≥ th·ªÉ ·ªïn ƒë·ªãnh RAM spike)
-XX:-ProfileVM				#T·∫Øt profiling c·ªßa ch√≠nh JVM


üß† Nh√≥m -Djdk.*: T·ªëi ∆∞u Thread / Vector API / JDK behavior
-Djdk.virtualThreadScheduler.parallelism=72	#√âp m·ª©c ƒë·ªô song song cho VirtualThreadScheduler (·∫£nh h∆∞·ªüng chunkload async n·∫øu d√πng virtual threads nh∆∞ C2ME)
-Djdk.tracePinnedThreads=full			#D√πng ƒë·ªÉ debug, xem lu·ªìng n√†o b·ªã "pinned" khi·∫øn GC kh√¥ng t·ªëi ∆∞u
-Djdk.gtk.version=2				#Ch·∫°y Minecraft v·ªõi GTK2 tr√™n Linux (tr√°nh crash GPU driver)
-Djdk.nio.maxCachedBufferSize=262144		#Gi·ªõi h·∫°n size buffer cached trong NIO (·ªïn ƒë·ªãnh memory h∆°n)

üßÆ Nh√≥m -Dorg.lwjgl.*: T·ªëi ∆∞u b·ªô engine ƒë·ªì h·ªça (LWJGL)
-Dorg.lwjgl.system.allocator=jemalloc			#D√πng jemalloc cho LWJGL ‚Üí gi·∫£m ph√¢n m·∫£nh b·ªô nh·ªõ
-Dorg.lwjgl.opengl.Display.enableHighDPI=true		#B·∫≠t DPI cao (gi√∫p r√µ h∆°n, nh·∫•t l√† 2K/4K)
-Dorg.lwjgl.util.Debug=true				#B·∫≠t debug LWJGL (kh√¥ng n√™n d√πng khi ch∆°i, ch·ªâ ƒë·ªÉ trace l·ªói)
-Dorg.lwjgl.util.NoChecks=true				#T·∫Øt check an to√†n trong LWJGL ‚Üí tƒÉng nh·∫π hi·ªáu su·∫•t

üß± Nh√≥m -Dsodium.*, -Dfabric.*: Mod-specific (n·∫øu b·∫°n d√πng Sodium/Fabric)
-Dsodium.useNioBuffers=true				#(kh√¥ng ch√≠nh th·ª©c) th·ª≠ √©p Sodium d√πng NIO buffer, c√≥ th·ªÉ c·∫£i thi·ªán mesh build hi·ªáu su·∫•t
-Dsodium.vertex-cache-size=1048576			#(t√πy b·∫£n Sodium) √©p cache size cho mesh vertex (tƒÉng FPS scene l·ªõn)
-Dfabric.log.disableAnsi=false				#Cho ph√©p log c√≥ m√†u (n·∫øu b·ªã v√¥ hi·ªáu h√≥a do console)

üíæ Nh√≥m -Djava.*: T·ªëi ∆∞u heap, GC, classload
-Djava.awt.headless=true				#T·∫Øt UI c·ªßa AWT n·∫øu kh√¥ng c·∫ßn d√πng (ch·∫°y server ho·∫∑c headless client)
-Djava.locale.providers=COMPAT				#Tr√°nh l·ªói locale tr√™n m·ªôt s·ªë b·∫£n Java ho·∫∑c qu·ªëc t·∫ø h√≥a
-Djava.security.egd=file:/dev/urandom			#TƒÉng t·ªëc kh·ªüi ƒë·ªông b·∫±ng c√°ch c·∫£i thi·ªán entropy source tr√™n Linux
-Djava.net.preferIPv4Stack=true				#Tr√°nh l·ªói m·∫°ng khi Minecraft b·ªã IPv6 g√¢y bug



üöÄ Nh√≥m -Dcom.sun.*: G·∫Øn s√¢u v·ªõi JDK
-Dcom.sun.management.jmxremote				#B·∫≠t theo d√µi GC, memory runtime (debug server Minecraft)
-Dcom.sun.management.gcNotification=true		#B·∫≠t GC notification events (n·∫øu b·∫°n theo d√µi GC log)
-Dio.netty.allocator.useCacheForAllThreads=true
-Dio.netty.threadLocalDirectBufferSize=65536
-Dio.netty.leakDetection.level=disabled

-Dio.netty.allocator.type=pooled				# T·ªëi ∆∞u DirectBuffer & Pool
-Dio.netty.allocator.useCacheForAllThreads=true
-Dio.netty.threadLocalDirectBufferSize=65536

-Dio.netty.threadLocalMap.stringBuilder.initialSize=2048	# TƒÉng k√≠ch th∆∞·ªõc StringBuilder & char buffer cache
-Dio.netty.threadLocalMap.stringBuilder.maxSize=8192
-Dio.netty.maxThreadLocalCharBufferSize=32768

-Dio.netty.buffer.checkAccessible=false				# T·∫Øt c√°c check n·∫øu ch·∫Øc ch·∫Øn kh√¥ng l·ªói
-Dio.netty.buffer.checkBounds=false

-Dio.netty.leakDetection.level=disabled				# T·∫Øt leak detector (n·∫øu kh√¥ng c·∫ßn debug)


-Dio.netty.buffer.checkAccessible=false
-Dio.netty.buffer.checkBounds=false



| Flag                                  | M·∫∑c ƒë·ªãnh | G·ª£i √Ω t·ªëi ∆∞u v·ªõi ZGC + RAM 160G + 600 mods                            |
| ------------------------------------- | -------- | --------------------------------------------------------------------- |
| `AdaptiveSizeDecrementScaleFactor`    | `4`      | ‚úÖ Gi·ªØ                                                                 |
| `AdaptiveSizePolicyInitializingSteps` | `20`     | üîº **TƒÉng l√™n 64** ‚Üí ZGC th√≠ch kh·ªüi ƒë·ªông m·ªÅm m·∫°i h∆°n                  |
| `AdaptiveSizePolicyWeight`            | `10`     | üîº **TƒÉng l√™n 20\~30** ƒë·ªÉ ph·∫£n ·ª©ng GC "m∆∞·ª£t" h∆°n v·ªõi modload dao ƒë·ªông |
| `AdaptiveSizeThroughPutPolicy`        | `0`      | ‚úÖ Gi·ªØ                                                                 |
| `AdaptiveTimeWeight`                  | `25`     | üîº **TƒÉng l√™n 40** ƒë·ªÉ ∆∞u ti√™n throughput h∆°n khi c√≥ spike             |


‚úÖ Flags m·ªõi n√™n th√™m ƒë·ªÉ tƒÉng FPS:
-XX:AllocateInstancePrefetchLines=4
-XX:AllocatePrefetchInstr=1
-XX:AllocatePrefetchLines=4
-XX:AllocatePrefetchStepSize=8
-XX:ArrayCopyLoadStoreMaxElem=16
-XX:ArrayOperationPartialInlineSize=64
-XX:AutoBoxCacheMax=1024
-XX:AvgMonitorsPerThreadEstimate=2048

üéØ T·ªïng k·∫øt flag ƒëi·ªÅu ch·ªânh l·∫ßn n√†y:
-XX:C1InlineStackLimit=15
-XX:C1MaxInlineLevel=15
-XX:C1MaxInlineSize=64
-XX:C1MaxRecursiveInlineLevel=3
-XX:C1MaxTrivialSize=12
-XX:CompileThreshold=1000
-XX:CompilerThreadPriority=1
-XX:-DebugInlinedCalls
-XX:-DelayCompilerStubsGeneration
-XX:+DisablePrimordialThreadGuardPages
-XX:-DontCompileHugeMethods
-XX:+DontYieldALot
-XX:EliminateAllocationArraySizeLimit=128
-XX:EliminateAllocationFieldsLimit=1024
-XX:EscapeAnalysisTimeout=100.0
-XX:ErrorLogPrintCodeLimit=0
-XX:+ExplicitGCInvokesConcurrent



‚úÖ G·ª£i √Ω ƒëi·ªÅu ch·ªânh cho G1GC (ƒë∆∞·ª£c ZGC h·ªó tr·ª£ fallback khi c·∫ßn):
Flag	G·ª£i √Ω	Gi·∫£i th√≠ch
G1ConcRefinementThreads	12			üîº TƒÉng s·ªë thread tinh ch·ªânh remembered set ‚Üí ·ªïn ƒë·ªãnh GC time
G1HeapRegionSize	8m ho·∫∑c 16m		‚úÖ Gi·∫£m s·ªë v√πng ‚Üí tƒÉng t·ªëc scan v√πng heap l·ªõn (b·∫°n c√≥ 160GB RAM)
G1ReservePercent	5			üîΩ Gi·∫£m buffer v√πng d·ª± ph√≤ng n·∫øu RAM r·∫•t l·ªõn
G1NewSizePercent	15			üîº Cho ph√©p v√πng young l·ªõn h∆°n ‚Üí √≠t minor GC h∆°n
G1MaxNewSizePercent	40			üîΩ Tr√°nh young qu√° to ‚Üí kh√¥ng ƒë·ªß v√πng cho old
G1MixedGCLiveThresholdPercent	93		üîº Ch·ªâ collect v√πng old th·ª±c s·ª± c·∫ßn, gi√∫p gi·∫£m pause
G1SATBBufferSize	2048			üîº ƒê·ªß buffer ƒë·ªÉ tr√°nh block khi ch·∫°y nhi·ªÅu lu·ªìng
G1SATBBufferEnqueueingThresholdPercent	80	üîº Gi·∫£m s·ªë l·∫ßn pause do full queue
G1RSetUpdatingPauseTimePercent	5		üîΩ C√¢n b·∫±ng gi·ªØa update RSet v√† pause GC
G1PeriodicGCInterval	600000			‚úÖ M·ªói 10 ph√∫t ‚Üí gi√∫p cleanup khi idle
G1UseReferencePrecleaning	false		üîΩ Kh√¥ng c·∫ßn n·∫øu b·∫°n ∆∞u ti√™n throughput thay v√¨ reclaim nhanh
GCTimeLimit	90				üîΩ Gi·∫£m ƒë·ªÉ gi·ªØ th·ªùi gian GC ·ªïn ƒë·ªãnh
GCTimeRatio	80				üîΩ Cho ph√©p JVM d√πng 20% th·ªùi gian cho GC n·∫øu c·∫ßn
G1ConcMarkStepDurationMillis	4.0		üîΩ ƒê·ªÉ chia nh·ªè c√¥ng vi·ªác background GC, tr√°nh ·∫£nh h∆∞·ªüng FPS
G1ExpandByPercentOfAvailable	40		üîº TƒÉng t·ªëc heap expansion khi c·∫ßn thi·∫øt
G1OldCSetRegionThresholdPercent	25		üîº ƒê·ªÉ mixed GC gom d·ªçn nhi·ªÅu v√πng h∆°n
HeapBaseMinAddress	4096m			üß† M·ªôt s·ªë mod n·∫∑ng allocate object nhi·ªÅu, d·ªãch v√πng base xa s·∫Ω ·ªïn ƒë·ªãnh h∆°n




-XX:-IntelJccErratumMitigation
-XX:LoopOptsCount=50
-XX:LoopPercentProfileLimit=5
-XX:LiveNodeCountInliningCutoff=60000
-XX:-LogEvents
-XX:LoopStripMiningIterShortLoop=5
-XX:MaxInlineSize=150
-XX:LoopUnrollMin=2
-XX:MaxVectorSize=64
-XX:MetaspaceSize=268435456
-XX:MinRAMPercentage=5.0
-XX:+UseNUMA
-XX:+UseLargePages




üöÄ Nh√≥m -Dgraal.*: G·∫Øn s√¢u v·ªõi GraalVM Bao g·ªìm CE v√† EE
-XX:+EnableJVMCIProduct				# B·∫≠t c√°c t√≠nh nƒÉng JVMCI trong m√¥i tr∆∞·ªùng production (t·ªëi ∆∞u hi·ªáu nƒÉng)
-XX:+EnableJVMCI				# B·∫≠t JVMCI (Java Virtual Machine Compiler Interface) ƒë·ªÉ s·ª≠ d·ª•ng GraalVM
-XX:+EnableDynamicAgentLoading		# Cho ph√©p load agent trong l√∫c JVM ƒëang ch·∫°y h·ªØu √≠ch cho debug nh∆∞ng ti·ªÅm ·∫©n r·ªßi ro b·∫£o m·∫≠t n·∫øu kh√¥ng ki·ªÉm so√°t
-XX:+EnableAsyncStackTrace			# Cho ph√©p thu th·∫≠p async stack trace (h·ªØu √≠ch khi debug thread ho·∫∑c Agent injection nh∆∞ b·∫°n ƒëang l√†m)
-XX:+BootstrapJVMCI				# Cho ph√©p load tr√¨nh bi√™n d·ªãch JVMCI khi kh·ªüi ƒë·ªông JVM (d√πng cho GraalVM)
-XX:+JVMCIPrintProperties			# In ra c√°c thu·ªôc t√≠nh c·ªßa JVMCI (GraalVM) khi kh·ªüi ƒë·ªông
-XX:+JVMCIPrintCompilerName			# In t√™n c·ªßa tr√¨nh bi√™n d·ªãch JVMCI (GraalVM) khi bi√™n d·ªãch method
-XX:+JVMCIPrintCompileQueue			# In th√¥ng tin h√†ng ƒë·ª£i bi√™n d·ªãch c·ªßa JVMCI (GraalVM)
-XX:+JVMCIPrintCompilerStatistics		# In th·ªëng k√™ bi√™n d·ªãch c·ªßa JVMCI (GraalVM) khi bi√™n d·ªãch method
-XX:+JVMCIPrintCompilation			# In th√¥ng tin bi√™n d·ªãch c·ªßa JVMCI (GraalVM) khi bi√™n d·ªãch method
-XX:+JVMCIPrintInlining			# In th√¥ng tin inline c·ªßa JVMCI (GraalVM) khi bi√™n d·ªãch method
-XX:+JVMCIPrintIntrinsics			# In danh s√°ch intrinsic ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi JVMCI (GraalVM)
-XX:+JVMCIPrintMethodData			# In d·ªØ li·ªáu profiling method c·ªßa JVMCI (GraalVM) tr∆∞·ªõc khi bi√™n d·ªãch
-XX:+JVMCIPrintOptoAssembly			# In m√£ assembly sau khi t·ªëi ∆∞u c·ªßa JVMCI (GraalVM) khi bi√™n d·ªãch method
-XX:+JVMCIPrintNMethods			# In danh s√°ch c√°c method ƒë√£ ƒë∆∞·ª£c bi√™n d·ªãch b·ªüi JVMCI (GraalVM)
-XX:+JVMCIPrintCodeCache			# In th√¥ng tin v·ªÅ code cache c·ªßa JVMCI (GraalVM) khi bi√™n d·ªãch method
-XX:+JVMCIPrintCodeHeapAnalytics		# In ph√¢n t√≠ch chi ti·∫øt v·ªÅ t·ª´ng heap trong code cache c·ªßa JVMCI (GraalVM)
-XX:+JVMCIPrintProperties			# In ra c√°c thu·ªôc t√≠nh c·ªßa JVMCI (GraalVM) khi kh·ªüi ƒë·ªông
-XX:+JVMCIPrintCompilationStatistics		# In th·ªëng k√™ bi√™n d·ªãch c·ªßa JVMCI (GraalVM) khi bi√™n d·ªãch method
-XX:+JVMCIPrintCompilationQueue		# In th√¥ng tin h√†ng ƒë·ª£i bi√™n d·ªãch c·ªßa JVMCI (GraalVM)
-XX:+JVMCIPrintCompilerStatistics		# In th·ªëng k√™ bi√™n d·ªãch c·ªßa JVMCI (GraalVM) khi bi√™n d·ªãch method
-XX:+JVMCIPrintCompilerName			# In t√™n c·ªßa tr√¨nh bi√™n d·ªãch JVMCI (GraalVM) khi bi√™n d·ªãch method
-XX:+JVMCIPrintCompilerProperties		# In ra c√°c thu·ªôc t√≠nh c·ªßa tr√¨nh bi√™n d·ªãch JVMCI (GraalVM) khi kh·ªüi ƒë·ªông
-XX:+JVMCIPrintCompilerOptions		# In ra c√°c t√πy ch·ªçn c·ªßa tr√¨nh bi√™n d·ªãch JVMCI (GraalVM) khi kh·ªüi ƒë·ªông
-XX:+JVMCIPrintCompilerVersion		# In ra phi√™n b·∫£n c·ªßa tr√¨nh bi√™n d·ªãch JVMCI (GraalVM) khi kh·ªüi ƒë·ªông
-Dgraal.ExplicitUnsafe=true			# T·ªëi ∆∞u truy c·∫≠p Unsafe, khi vi·∫øt mod ho·∫∑c agent native.
-Dgraal.CompileThreads=24			# T·ªëi ∆∞u thread bi√™n d·ªãch cho GraalVM n·∫øu c√≥ th·ª≠.
-Dgraal.UseSVE=true				# D√†nh cho ARMv8 SVE (n·∫øu b·∫°n test native vector JIT future).
-Dgraal.OptMacroFusion=true			# T·ªëi ∆∞u instruction fusion trong JIT (Graal).
-Dgraal.OptAvoidSpeculation=true		# Tr√°nh speculative branch trong code JIT ‚Äì gi·∫£m overhead multi-core render.
-Dgraal.OptVectorize=true			# B·∫≠t vectorization trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ph√©p to√°n tr√™n m·∫£ng l·ªõn.
-Dgraal.OptVectorizeLoops=true		# B·∫≠t vectorization cho c√°c v√≤ng l·∫∑p trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ph√©p to√°n l·∫∑p.
-Dgraal.OptVectorizeArrays=true		# B·∫≠t vectorization cho c√°c ph√©p to√°n tr√™n m·∫£ng trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ph√©p to√°n tr√™n m·∫£ng l·ªõn.
-Dgraal.OptVectorizeMath=true		# B·∫≠t vectorization cho c√°c ph√©p to√°n to√°n h·ªçc trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ph√©p to√°n ph·ª©c t·∫°p.
-Dgraal.OptVectorizeString=true		# B·∫≠t vectorization cho c√°c ph√©p to√°n tr√™n chu·ªói trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ph√©p to√°n chu·ªói.
-Dgraal.OptVectorizeStreams=true		# B·∫≠t vectorization cho c√°c ph√©p to√°n tr√™n stream trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ph√©p to√°n stream.
-Dgraal.OptVectorizeCollections=true	# B·∫≠t vectorization cho c√°c ph√©p to√°n tr√™n collection trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ph√©p to√°n collection.
-Dgraal.OptVectorizeParallel=true		# B·∫≠t vectorization cho c√°c ph√©p to√°n song song trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ph√©p to√°n song song.
-Dgraal.OptVectorizeConcurrent=true	# B·∫≠t vectorization cho c√°c ph√©p to√°n ƒë·ªìng th·ªùi trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ph√©p to√°n ƒë·ªìng th·ªùi.
-Dgraal.OptVectorizeJIT=true		# B·∫≠t vectorization cho c√°c ph√©p to√°n JIT trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ph√©p to√°n JIT.
-Dgraal.OptVectorizeJVM=true		# B·∫≠t vectorization cho c√°c ph√©p to√°n JVM trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ph√©p to√°n JVM.
-Dgraal.OptVectorizeJava=true		# B·∫≠t vectorization cho c√°c ph√©p to√°n Java trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ph√©p to√°n Java.
-Dgraal.OptVectorizeGraal=true		# B·∫≠t vectorization cho c√°c ph√©p to√°n Graal trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ph√©p to√°n Graal.
-Dgraal.OptVectorizeGraalVM=true		# B·∫≠t vectorization cho c√°c ph√©p to√°n GraalVM trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ph√©p to√°n GraalVM.
-Dgraal.OptVectorizeNative=true		# B·∫≠t vectorization cho c√°c ph√©p to√°n native trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ph√©p to√°n native.
-Dgraal.OptVectorizeNativeCode=true	# B·∫≠t vectorization cho c√°c ph√©p to√°n native code trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ph√©p to√°n native code.
-Dgraal.OptVectorizeNativeMethods=true	# B·∫≠t vectorization cho c√°c ph∆∞∆°ng th·ª©c native trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ph∆∞∆°ng th·ª©c native.
-Dgraal.OptVectorizeNativeLibraries=true	# B·∫≠t vectorization cho c√°c th∆∞ vi·ªán native trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c th∆∞ vi·ªán native.
-Dgraal.OptVectorizeNativeFunctions=true	# B·∫≠t vectorization cho c√°c h√†m native trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c h√†m native.
-Dgraal.OptVectorizeNativeAPIs=true	# B·∫≠t vectorization cho c√°c API native trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c API native.
-Dgraal.OptVectorizeNativeInterfaces=true	# B·∫≠t vectorization cho c√°c interface native trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c interface native.
-Dgraal.OptVectorizeNativeClasses=true	# B·∫≠t vectorization cho c√°c class native trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c class native.
-Dgraal.OptVectorizeNativeObjects=true	# B·∫≠t vectorization cho c√°c object native trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c object native.
-Dgraal.OptVectorizeNativeTypes=true	# B·∫≠t vectorization cho c√°c ki·ªÉu native trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c ki·ªÉu native.
-Dgraal.OptVectorizeNativeVariables=true	# B·∫≠t vectorization cho c√°c bi·∫øn native trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c bi·∫øn native.
-Dgraal.OptVectorizeNativeConstants=true	# B·∫≠t vectorization cho c√°c h·∫±ng s·ªë native trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c h·∫±ng s·ªë native.
-Dgraal.OptVectorizeNativeExpressions=true	# B·∫≠t vectorization cho c√°c bi·ªÉu th·ª©c native trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c bi·ªÉu th·ª©c native.
-Dgraal.OptVectorizeNativeStatements=true	# B·∫≠t vectorization cho c√°c c√¢u l·ªánh native trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c c√¢u l·ªánh native.
-Dgraal.OptVectorizeNativeBlocks=true	# B·∫≠t vectorization cho c√°c kh·ªëi native trong GraalVM, gi√∫p tƒÉng t·ªëc c√°c kh·ªëi native.













Flags n√†y m·∫∑t ƒë·ªãnh
GraalVM Flags



[Global flags]
      int AVX3Threshold                            = 4096                              {ARCH diagnostic} {default}
     bool AbortVMOnCompilationFailure              = false                                  {diagnostic} {default}
    ccstr AbortVMOnException                       =                                        {diagnostic} {default}
    ccstr AbortVMOnExceptionMessage                =                                        {diagnostic} {default}
     bool AbortVMOnSafepointTimeout                = false                                  {diagnostic} {default}
     bool AbortVMOnVMOperationTimeout              = false                                  {diagnostic} {default}
     intx AbortVMOnVMOperationTimeoutDelay         = 1000                                   {diagnostic} {default}
      int ActiveProcessorCount                     = -1                                        {product} {default}
    uintx AdaptiveSizeDecrementScaleFactor         = 4                                         {product} {default}
    uintx AdaptiveSizeMajorGCDecayTimeScale        = 10                                        {product} {default}
    uintx AdaptiveSizePolicyCollectionCostMargin   = 50                                        {product} {default}
    uintx AdaptiveSizePolicyInitializingSteps      = 20                                        {product} {default}
    uintx AdaptiveSizePolicyOutputInterval         = 0                                         {product} {default}
    uintx AdaptiveSizePolicyWeight                 = 10                                        {product} {default}
    uintx AdaptiveSizeThroughPutPolicy             = 0                                         {product} {default}
    uintx AdaptiveTimeWeight                       = 25                                        {product} {default}
     bool AggressiveHeap                           = false                                     {product} {default}
     bool AggressiveUnboxing                       = true                                {C2 diagnostic} {default}
     bool AlignVector                              = false                                  {C2 product} {default}
    ccstr AllocateHeapAt                           =                                           {product} {default}
     intx AllocateInstancePrefetchLines            = 1                                         {product} {default}
     intx AllocatePrefetchDistance                 = 192                                       {product} {default}
     intx AllocatePrefetchInstr                    = 0                                         {product} {default}
     intx AllocatePrefetchLines                    = 4                                         {product} {default}
     intx AllocatePrefetchStepSize                 = 64                                        {product} {default}
     intx AllocatePrefetchStyle                    = 1                                         {product} {default}
     bool AllowArchivingWithJavaAgent              = false                            {JVMCI diagnostic} {default}
     bool AllowParallelDefineClass                 = false                                     {product} {default}
     bool AllowRedefinitionToAddDeleteMethods      = false                                     {product} {default}
     bool AllowUserSignalHandlers                  = false                                     {product} {default}
     bool AllowVectorizeOnDemand                   = true                                   {C2 product} {default}
     bool AlwaysActAsServerClassMachine            = false                                     {product} {default}
     bool AlwaysCompileLoopMethods                 = false                                     {product} {default}
     bool AlwaysPreTouch                           = false                                     {product} {default}
     bool AlwaysPreTouchStacks                     = false                                  {diagnostic} {default}
     bool AlwaysRestoreFPU                         = false                                     {product} {default}
     bool AlwaysTenure                             = false                                     {product} {default}
    ccstr ArchiveClassesAtExit                     =                                     {JVMCI product} {default}
      int ArchiveRelocationMode                    = 1                                {JVMCI diagnostic} {default}
     intx ArrayCopyLoadStoreMaxElem                = 8                                         {product} {default}
     intx ArrayOperationPartialInlineSize          = 0                                   {C2 diagnostic} {default}
     intx AsyncDeflationInterval                   = 250                                    {diagnostic} {default}
   size_t AsyncLogBufferSize                       = 2097152                                   {product} {default}
     intx AutoBoxCacheMax                          = 128                                    {C2 product} {default}
     bool AutoCreateSharedArchive                  = false                               {JVMCI product} {default}
   size_t AvgMonitorsPerThreadEstimate             = 1024                                   {diagnostic} {default}
     intx BCEATraceLevel                           = 0                                         {product} {default}
     bool BackgroundCompilation                    = true                                   {pd product} {default}
   size_t BaseFootPrintEstimate                    = 268435456                                 {product} {default}
     bool BlockLayoutByFrequency                   = true                                   {C2 product} {default}
     intx BlockLayoutMinDiamondPercentage          = 20                                     {C2 product} {default}
     bool BlockLayoutRotateLoops                   = true                                   {C2 product} {default}
     bool BytecodeVerificationLocal                = false                                  {diagnostic} {default}
     bool BytecodeVerificationRemote               = true                                   {diagnostic} {default}
     intx C1InlineStackLimit                       = 5                                      {C1 product} {default}
     intx C1MaxInlineLevel                         = 9                                      {C1 product} {default}
     intx C1MaxInlineSize                          = 35                                     {C1 product} {default}
     intx C1MaxRecursiveInlineLevel                = 1                                      {C1 product} {default}
     intx C1MaxTrivialSize                         = 6                                      {C1 product} {default}
     bool C1OptimizeVirtualCallProfiling           = true                                   {C2 product} {default}
     bool C1ProfileBranches                        = true                                   {C2 product} {default}
     bool C1ProfileCalls                           = true                                   {C2 product} {default}
     bool C1ProfileCheckcasts                      = true                                   {C2 product} {default}
     bool C1ProfileInlinedCalls                    = true                                   {C2 product} {default}
     bool C1ProfileVirtualCalls                    = true                                   {C2 product} {default}
     bool C1UpdateMethodData                       = true                                   {C2 product} {default}
     intx CICompilerCount                          = 18                                        {product} {ergonomic}
     bool CICompilerCountPerCPU                    = true                                      {product} {default}
     bool CIPrintCompileQueue                      = false                                  {diagnostic} {default}
     bool CIPrintCompilerName                      = false                                  {diagnostic} {default}
     bool CITime                                   = false                                     {product} {default}
     bool CheckIntrinsics                          = true                                   {diagnostic} {default}
     bool CheckJNICalls                            = false                                     {product} {default}
     bool ClassUnloading                           = true                                      {product} {default}
     bool ClassUnloadingWithConcurrentMark         = true                                      {product} {default}
     bool ClipInlining                             = true                                      {product} {default}
    uintx CodeCacheExpansionSize                   = 65536                                  {pd product} {default}
    uintx CodeCacheMinBlockLength                  = 6                                   {pd diagnostic} {default}
     bool CompactStrings                           = true                                   {pd product} {default}
    ccstr CompilationMode                          = default                                   {product} {default}
ccstrlist CompileCommand                           =                                           {product} {default}
    ccstr CompileCommandFile                       =                                           {product} {default}
ccstrlist CompileOnly                              =                                           {product} {default}
     intx CompileThreshold                         = 10000                                  {pd product} {default}
   double CompileThresholdScaling                  = 1.000000                                  {product} {default}
    ccstr CompilerDirectivesFile                   =                                        {diagnostic} {default}
     bool CompilerDirectivesIgnoreCompileCommands  = false                                  {diagnostic} {default}
      int CompilerDirectivesLimit                  = 50                                     {diagnostic} {default}
     bool CompilerDirectivesPrint                  = false                                  {diagnostic} {default}
      int CompilerThreadPriority                   = -1                                        {product} {default}
     intx CompilerThreadStackSize                  = 0                                      {pd product} {default}
   size_t CompressedClassSpaceSize                 = 1073741824                                {product} {default}
     uint ConcGCThreads                            = 11                                        {product} {ergonomic}
     intx ConditionalMoveLimit                     = 3                                   {C2 pd product} {default}
     intx ContendedPaddingWidth                    = 128                                       {product} {default}
ccstrlist ControlIntrinsic                         =                                        {diagnostic} {default}
     bool CrashOnOutOfMemoryError                  = false                                     {product} {default}
     bool CreateCoredumpOnCrash                    = true                                      {product} {default}
     bool DTraceAllocProbes                        = false                                     {product} {default}
     bool DTraceMethodProbes                       = false                                     {product} {default}
     bool DTraceMonitorProbes                      = false                                     {product} {default}
     bool DebugInlinedCalls                        = true                                {C2 diagnostic} {default}
     bool DebugNonSafepoints                       = false                                  {diagnostic} {default}
     bool DeferInitialCardMark                     = false                                  {diagnostic} {default}
     bool DelayCompilerStubsGeneration             = true                                {pd diagnostic} {default}
     bool DeoptimizeNMethodBarriersALot            = false                                  {diagnostic} {default}
      int DiagnoseSyncOnValueBasedClasses          = 0                                      {diagnostic} {default}
     bool DisableAttachMechanism                   = false                                     {product} {default}
     bool DisableExplicitGC                        = false                                     {product} {default}
ccstrlist DisableIntrinsic                         =                                        {diagnostic} {default}
     bool DisplayVMOutput                          = true                                   {diagnostic} {default}
     bool DisplayVMOutputToStderr                  = false                                     {product} {default}
     bool DisplayVMOutputToStdout                  = false                                     {product} {default}
     bool DoEscapeAnalysis                         = true                                   {C2 product} {default}
     bool DoReserveCopyInSuperWord                 = true                                   {C2 product} {default}
     intx DominatorSearchLimit                     = 1000                                {C2 diagnostic} {default}
     bool DontCompileHugeMethods                   = true                                      {product} {default}
     bool DontYieldALot                            = false                                  {pd product} {default}
    ccstr DumpLoadedClassList                      =                                     {JVMCI product} {default}
     bool DumpReplayDataOnError                    = true                                      {product} {default}
     bool DuplicateBackedge                        = true                                   {diagnostic} {default}
     bool EagerJVMCI                               = false                                  {C1 product} {default}
     bool EagerXrunInit                            = false                                     {product} {default}
     intx EliminateAllocationArraySizeLimit        = 64                                     {C2 product} {default}
     intx EliminateAllocationFieldsLimit           = 512                                 {C2 diagnostic} {default}
     bool EliminateAllocations                     = true                                   {C2 product} {default}
     bool EliminateAutoBox                         = true                                   {C2 product} {default}
     bool EliminateLocks                           = true                                   {C2 product} {default}
     bool EliminateNestedLocks                     = true                                   {C2 product} {default}
     bool EnableContended                          = true                                      {product} {default}
     bool EnableDynamicAgentLoading                = true                                      {product} {default}
     bool EnableJVMCI                              = true                                {JVMCI product} {default}
     bool EnableJVMCIProduct                       = true                                {JVMCI product} {jimage}
     bool EnableThreadSMRStatistics                = false                                  {diagnostic} {default}
   size_t ErgoHeapSizeLimit                        = 0                                         {product} {default}
    ccstr ErrorFile                                =                                           {product} {default}
     bool ErrorFileToStderr                        = false                                     {product} {default}
     bool ErrorFileToStdout                        = false                                     {product} {default}
      int ErrorLogPrintCodeLimit                   = 3                                      {diagnostic} {default}
     bool ErrorLogSecondaryErrorDetails            = false                                  {diagnostic} {default}
 uint64_t ErrorLogTimeout                          = 120                                       {product} {default}
   double EscapeAnalysisTimeout                    = 20.000000                              {C2 product} {default}
     bool EstimateArgEscape                        = true                                      {product} {default}
     bool ExecutingUnitTests                       = false                                     {product} {default}
     bool ExitOnOutOfMemoryError                   = false                                     {product} {default}
     bool ExpandSubTypeCheckAtParseTime            = false                                  {diagnostic} {default}
     bool ExplicitGCInvokesConcurrent              = false                                     {product} {default}
     bool ExtensiveErrorReports                    = false                                     {product} {default}
    ccstr ExtraSharedClassListFile                 =                                     {JVMCI product} {default}
     bool FlightRecorder                           = false                                     {product} {default}
    ccstr FlightRecorderOptions                    =                                           {product} {default}
     bool FoldStableValues                         = true                                   {diagnostic} {default}
     bool ForceTimeHighResolution                  = false                                     {product} {default}
     bool ForceUnreachable                         = false                                  {diagnostic} {default}
     intx FreqInlineSize                           = 325                                 {C2 pd product} {default}
   double G1ConcMarkStepDurationMillis             = 10.000000                                 {product} {default}
     uint G1ConcRefinementThreads                  = 43                                        {product} {ergonomic}
    uintx G1ConfidencePercent                      = 50                                        {product} {default}
   size_t G1HeapRegionSize                         = 33554432                                  {product} {ergonomic}
    uintx G1HeapWastePercent                       = 5                                         {product} {default}
    uintx G1MixedGCCountTarget                     = 8                                         {product} {default}
     uint G1NumCardsCostSampleThreshold            = 1000                                   {diagnostic} {default}
    uintx G1PeriodicGCInterval                     = 0                                      {manageable} {default}
     bool G1PeriodicGCInvokesConcurrent            = true                                      {product} {default}
   double G1PeriodicGCSystemLoadThreshold          = 0.000000                               {manageable} {default}
     intx G1RSetUpdatingPauseTimePercent           = 10                                        {product} {default}
     uint G1RefProcDrainInterval                   = 1000                                      {product} {default}
    uintx G1ReservePercent                         = 10                                        {product} {default}
     uint G1RestoreRetainedRegionChunksPerWorker   = 16                                     {diagnostic} {default}
    uintx G1SATBBufferEnqueueingThresholdPercent   = 60                                        {product} {default}
   size_t G1SATBBufferSize                         = 1024                                      {product} {default}
     intx G1SummarizeRSetStatsPeriod               = 0                                      {diagnostic} {default}
   size_t G1UpdateBufferSize                       = 256                                       {product} {default}
     bool G1UseAdaptiveIHOP                        = true                                      {product} {default}
     bool G1UseConcRefinement                      = true                                   {diagnostic} {default}
     bool G1VerifyHeapRegionCodeRoots              = false                                  {diagnostic} {default}
     uint GCCardSizeInBytes                        = 512                                       {product} {default}
    uintx GCDrainStackTargetSize                   = 64                                        {product} {ergonomic}
    uintx GCHeapFreeLimit                          = 2                                         {product} {default}
    uintx GCLockerEdenExpansionPercent             = 5                                         {product} {default}
    uintx GCLockerRetryAllocationCount             = 2                                      {diagnostic} {default}
    uintx GCPauseIntervalMillis                    = 201                                       {product} {default}
    uintx GCTimeLimit                              = 98                                        {product} {default}
    uintx GCTimeRatio                              = 12                                        {product} {default}
     intx GuaranteedAsyncDeflationInterval         = 60000                                  {diagnostic} {default}
     intx GuaranteedSafepointInterval              = 1000                                   {diagnostic} {default}
     bool HandshakeALot                            = false                                  {diagnostic} {default}
     uint HandshakeTimeout                         = 0                                      {diagnostic} {default}
   size_t HeapBaseMinAddress                       = 2147483648                             {pd product} {default}
     bool HeapDumpAfterFullGC                      = false                                  {manageable} {default}
     bool HeapDumpBeforeFullGC                     = false                                  {manageable} {default}
     intx HeapDumpGzipLevel                        = 0                                      {manageable} {default}
     bool HeapDumpOnOutOfMemoryError               = false                                  {manageable} {default}
    ccstr HeapDumpPath                             = MojangTricksIntelDriversForPerformance_javaw.exe_minecraft.exe.heapdump         {manageable} {command line}
    uintx HeapFirstMaximumCompactionCount          = 3                                         {product} {default}

    uintx HeapMaximumCompactionInterval            = 20                                        {product} {default}
    uintx HeapSearchSteps                          = 3                                         {product} {default}
   size_t HeapSizePerGCThread                      = 43620760                                  {product} {default}
     bool IdealizeClearArrayNode                   = true                             {C2 pd diagnostic} {default}
     bool IgnoreEmptyClassPaths                    = false                                     {product} {default}
     bool IgnoreUnrecognizedVMOptions              = false                                     {product} {default}
     bool ImplicitNullChecks                       = true                                {pd diagnostic} {default}
    uintx IncreaseFirstTierCompileThresholdAt      = 50                                        {product} {default}
     bool IncrementalInline                        = true                                   {C2 product} {default}
     bool IncrementalInlineForceCleanup            = false                               {C2 diagnostic} {default}
     bool IncrementalInlineMH                      = true                                {C2 diagnostic} {default}
     bool IncrementalInlineVirtual                 = true                                {C2 diagnostic} {default}
     intx InitArrayShortSize                       = 64                                  {pd diagnostic} {default}
    uintx InitialCodeCacheSize                     = 2555904                                {pd product} {default}
   size_t InitialHeapSize                          = 1073741824                                {product} {command line, ergonomic}
    uintx InitialRAMFraction                       = 64                                        {product} {default}
   double InitialRAMPercentage                     = 1.562500                                  {product} {default}
    uintx InitialSurvivorRatio                     = 8                                         {product} {default}
    uintx InitialTenuringThreshold                 = 7                                         {product} {default}
    uintx InitiatingHeapOccupancyPercent           = 45                                        {product} {default}
     bool InjectGCWorkerCreationFailure            = false                                  {diagnostic} {default}
     bool Inline                                   = true                                      {product} {default}
     bool InlineArrayCopy                          = true                                   {diagnostic} {default}
     bool InlineClassNatives                       = true                                   {diagnostic} {default}
    ccstr InlineDataFile                           =                                           {product} {default}
   double InlineFrequencyRatio                     = 0.250000                               {diagnostic} {default}
     bool InlineMathNatives                        = true                                   {diagnostic} {default}
     bool InlineNatives                            = true                                   {diagnostic} {default}
     bool InlineObjectCopy                         = true                                {C2 diagnostic} {default}
     bool InlineObjectHash                         = true                                   {diagnostic} {default}
     bool InlineReflectionGetCallerClass           = true                                {C2 diagnostic} {default}
     intx InlineSmallCode                          = 1000                                {C2 pd product} {default}
     bool InlineSynchronizedMethods                = true                                   {C1 product} {default}
     bool InlineThreadNatives                      = true                                   {diagnostic} {default}
     bool InlineUnsafeOps                          = true                                   {diagnostic} {default}
     bool IntelJccErratumMitigation                = true                              {ARCH diagnostic} {default}
     intx InteriorEntryAlignment                   = 16                                  {C2 pd product} {default}
     intx InterpreterProfilePercentage             = 33                                        {product} {default}
     uint JVMCICompilerIdleDelay                   = 1000                                {JVMCI product} {default}
     intx JVMCICounterSize                         = 0                                      {C1 product} {default}
     bool JVMCICountersExcludeCompiler             = true                                   {C1 product} {default}
     intx JVMCIEventLogLevel                       = 1                                      {C1 product} {default}
    ccstr JVMCILibDumpJNIConfig                    =                                        {C1 product} {default}
    ccstr JVMCILibPath                             =                                        {C1 product} {default}
     intx JVMCINMethodSizeLimit                    = 655360                                 {C1 product} {default}
    ccstr JVMCINativeLibraryErrorFile              =                                        {C1 product} {default}
   double JVMCINativeLibraryThreadFraction         = 0.330000                               {C1 product} {default}
     bool JVMCIPrintProperties                     = false                               {JVMCI product} {default}
     intx JVMCIThreads                             = 1                                      {C1 product} {default}
     uint JVMCIThreadsPerNativeLibraryRuntime      = 1                                   {JVMCI product} {default}
     intx JVMCITraceLevel                          = 0                                      {C1 product} {default}
     bool JavaMonitorsInStackTrace                 = true                                      {product} {default}
      int JavaPriority10_To_OSPriority             = -1                                        {product} {default}
      int JavaPriority1_To_OSPriority              = -1                                        {product} {default}
      int JavaPriority2_To_OSPriority              = -1                                        {product} {default}
      int JavaPriority3_To_OSPriority              = -1                                        {product} {default}
      int JavaPriority4_To_OSPriority              = -1                                        {product} {default}
      int JavaPriority5_To_OSPriority              = -1                                        {product} {default}
      int JavaPriority6_To_OSPriority              = -1                                        {product} {default}
      int JavaPriority7_To_OSPriority              = -1                                        {product} {default}
      int JavaPriority8_To_OSPriority              = -1                                        {product} {default}
      int JavaPriority9_To_OSPriority              = -1                                        {product} {default}
   size_t LargePageHeapSizeThreshold               = 134217728                                 {product} {default}
   size_t LargePageSizeInBytes                     = 0                                         {product} {default}
     intx LiveNodeCountInliningCutoff              = 40000                                  {C2 product} {default}
     bool LogCompilation                           = false                                  {diagnostic} {default}
     bool LogEvents                                = true                                   {diagnostic} {default}
    uintx LogEventsBufferEntries                   = 20                                     {diagnostic} {default}
    ccstr LogFile                                  =                                        {diagnostic} {default}
     bool LogVMOutput                              = false                                  {diagnostic} {default}
     intx LoopMaxUnroll                            = 16                                     {C2 product} {default}
     intx LoopOptsCount                            = 43                                     {C2 product} {default}
     intx LoopPercentProfileLimit                  = 10                                  {C2 pd product} {default}
    uintx LoopStripMiningIter                      = 1000                                      {product} {default}
    uintx LoopStripMiningIterShortLoop             = 100                                       {product} {default}
     intx LoopUnrollLimit                          = 60                                  {C2 pd product} {default}
     intx LoopUnrollMin                            = 4                                      {C2 product} {default}
     bool LoopUnswitching                          = true                                   {C2 product} {default}
    ccstr MallocLimit                              =                                        {diagnostic} {default}
     bool ManagementServer                         = false                                     {product} {default}
   size_t MarkStackSize                            = 4194304                                   {product} {ergonomic}
   size_t MarkStackSizeMax                         = 536870912                                 {product} {default}
     uint MarkSweepAlwaysCompactCount              = 4                                         {product} {default}
    uintx MarkSweepDeadRatio                       = 5                                         {product} {default}
     intx MaxBCEAEstimateLevel                     = 5                                         {product} {default}
     intx MaxBCEAEstimateSize                      = 150                                       {product} {default}
 uint64_t MaxDirectMemorySize                      = 0                                         {product} {default}
     bool MaxFDLimit                               = true                                      {product} {default}
    uintx MaxGCMinorPauseMillis                    = 18446744073709551615                      {product} {default}
    uintx MaxGCPauseMillis                         = 200                                       {product} {default}
    uintx MaxHeapFreeRatio                         = 70                                     {manageable} {default}
   size_t MaxHeapSize                              = 134217728000                              {product} {command line}
     intx MaxInlineLevel                           = 15                                     {C2 product} {default}
     intx MaxInlineSize                            = 35                                     {C2 product} {default}
     intx MaxJNILocalCapacity                      = 65536                                     {product} {default}
     intx MaxJavaStackTraceDepth                   = 1024                                      {product} {default}
     intx MaxJumpTableSize                         = 65000                                  {C2 product} {default}
     intx MaxJumpTableSparseness                   = 5                                      {C2 product} {default}
     intx MaxLabelRootDepth                        = 1100                                   {C2 product} {default}
     intx MaxLoopPad                               = 11                                     {C2 product} {default}
   size_t MaxMetaspaceExpansion                    = 5439488                                   {product} {default}
    uintx MaxMetaspaceFreeRatio                    = 70                                        {product} {default}
   size_t MaxMetaspaceSize                         = 18446744073709551615                      {product} {default}
   size_t MaxNewSize                               = 80530636800                               {product} {ergonomic}
     intx MaxNodeLimit                             = 80000                                  {C2 product} {default}
 uint64_t MaxRAM                                   = 137438953472                           {pd product} {default}
    uintx MaxRAMFraction                           = 4                                         {product} {default}
   double MaxRAMPercentage                         = 25.000000                                 {product} {default}
     intx MaxRecursiveInlineLevel                  = 1                                      {C2 product} {default}
    uintx MaxTenuringThreshold                     = 15                                        {product} {default}
     intx MaxTrivialSize                           = 6                                      {C2 product} {default}
     intx MaxVectorSize                            = 32                                     {C2 product} {default}
   size_t MetaspaceSize                            = 22020096                                  {product} {default}
     bool MethodFlushing                           = true                                      {product} {default}
   size_t MinHeapDeltaBytes                        = 33554432                                  {product} {ergonomic}
    uintx MinHeapFreeRatio                         = 40                                     {manageable} {default}
   size_t MinHeapSize                              = 1073741824                                {product} {command line, ergonomic}
   double MinInlineFrequencyRatio                  = 0.008500                               {diagnostic} {default}
     intx MinJumpTableSize                         = 10                                  {C2 pd product} {default}
   size_t MinMetaspaceExpansion                    = 327680                                    {product} {default}
    uintx MinMetaspaceFreeRatio                    = 40                                        {product} {default}
     intx MinPassesBeforeFlush                     = 10                                     {diagnostic} {default}
    uintx MinRAMFraction                           = 2                                         {product} {default}
   double MinRAMPercentage                         = 50.000000                                 {product} {default}
    uintx MinSurvivorRatio                         = 3                                         {product} {default}
   size_t MinTLABSize                              = 2048                                      {product} {default}
     intx MonitorDeflationMax                      = 1000000                                {diagnostic} {default}
     intx MonitorUnlinkBatch                       = 500                                    {diagnostic} {default}
     intx MonitorUsedDeflationThreshold            = 90                                     {diagnostic} {default}
     intx MultiArrayExpandLimit                    = 6                                      {C2 product} {default}
    uintx NUMAChunkResizeWeight                    = 20                                        {product} {default}
   size_t NUMAInterleaveGranularity                = 2097152                                   {product} {default}
    uintx NUMAPageScanRate                         = 256                                       {product} {default}
   size_t NUMASpaceResizeRate                      = 1073741824                                {product} {default}
     bool NUMAStats                                = false                                     {product} {default}
    ccstr NativeMemoryTracking                     = off                                       {product} {default}
     bool NeverActAsServerClassMachine             = false                                  {pd product} {default}
     bool NeverTenure                              = false                                     {product} {default}
    uintx NewRatio                                 = 2                                         {product} {default}
   size_t NewSize                                  = 1363144                                   {product} {default}
   size_t NewSizeThreadIncrease                    = 5320                                   {pd product} {default}
     intx NmethodSweepActivity                     = 4                                         {product} {default}
    uintx NoAsyncDeflationProgressMax              = 3                                      {diagnostic} {default}
     intx NodeLimitFudgeFactor                     = 2000                                   {C2 product} {default}
    uintx NonNMethodCodeHeapSize                   = 12773148                               {pd product} {ergonomic}
    uintx NonProfiledCodeHeapSize                  = 119442546                              {pd product} {ergonomic}
     intx NumberOfLoopInstrToAlign                 = 4                                      {C2 product} {default}
      int ObjectAlignmentInBytes                   = 8                              {product lp64_product} {default}
   size_t OldPLABSize                              = 1024                                      {product} {default}
   size_t OldSize                                  = 5452592                                   {product} {default}
     bool OmitStackTraceInFastThrow                = true                                      {product} {default}
ccstrlist OnError                                  =                                           {product} {default}
ccstrlist OnOutOfMemoryError                       =                                           {product} {default}
     intx OnStackReplacePercentage                 = 140                                    {pd product} {default}
     bool OptimizeExpensiveOps                     = true                                {C2 diagnostic} {default}
     bool OptimizeFill                             = false                                  {C2 product} {default}
     bool OptimizePtrCompare                       = true                                   {C2 product} {default}
     bool OptimizeStringConcat                     = true                                   {C2 product} {default}
     bool OptimizeUnstableIf                       = true                                {C2 diagnostic} {default}
     bool OptoBundling                             = false                               {C2 pd product} {default}
     intx OptoLoopAlignment                        = 16                                     {pd product} {default}
     bool OptoRegScheduling                        = true                                {C2 pd product} {default}
     bool OptoScheduling                           = false                               {C2 pd product} {default}
    uintx PLABWeight                               = 75                                        {product} {default}
     bool PSChunkLargeArrays                       = true                                      {product} {default}
      int ParGCArrayScanChunk                      = 50                                        {product} {default}
    uintx ParallelGCBufferWastePct                 = 10                                        {product} {default}
     uint ParallelGCThreads                        = 43                                        {product} {default}
   size_t ParallelOldDeadWoodLimiterMean           = 50                                        {product} {default}
   size_t ParallelOldDeadWoodLimiterStdDev         = 80                                        {product} {default}
     bool ParallelRefProcBalancingEnabled          = true                                      {product} {default}
     bool ParallelRefProcEnabled                   = true                                      {product} {default}
     bool PartialPeelAtUnsignedTests               = true                                   {C2 product} {default}
     bool PartialPeelLoop                          = true                                   {C2 product} {default}
     intx PartialPeelNewPhiDelta                   = 0                                      {C2 product} {default}
     bool PauseAtExit                              = false                                  {diagnostic} {default}
     bool PauseAtStartup                           = false                                  {diagnostic} {default}
    ccstr PauseAtStartupFile                       =                                        {diagnostic} {default}
    uintx PausePadding                             = 1                                         {product} {default}
     intx PerBytecodeRecompilationCutoff           = 200                                       {product} {default}
     intx PerBytecodeTrapLimit                     = 4                                         {product} {default}
     intx PerMethodRecompilationCutoff             = 400                                       {product} {default}
     intx PerMethodTrapLimit                       = 100                                       {product} {default}
     bool PerfAllowAtExitRegistration              = false                                     {product} {default}
     bool PerfBypassFileSystemCheck                = false                                     {product} {default}
      int PerfDataMemorySize                       = 32768                                     {product} {default}
     intx PerfDataSamplingInterval                 = 50                                        {product} {default}
    ccstr PerfDataSaveFile                         =                                           {product} {default}
     bool PerfDataSaveToFile                       = false                                     {product} {default}
     bool PerfDisableSharedMem                     = false                                     {product} {default}
      int PerfMaxStringConstLength                 = 1024                                      {product} {default}
   size_t PreTouchParallelChunkSize                = 1073741824                             {pd product} {default}
     bool PreferInterpreterNativeStubs             = false                                  {pd product} {default}
     intx PrefetchCopyIntervalInBytes              = 576                                       {product} {default}
     intx PrefetchScanIntervalInBytes              = 576                                       {product} {default}
     bool PreserveAllAnnotations                   = false                                     {product} {default}
     bool PreserveFramePointer                     = false                                  {pd product} {default}
   size_t PretenureSizeThreshold                   = 0                                         {product} {default}
     bool PrintAdapterHandlers                     = false                                  {diagnostic} {default}
     bool PrintAssembly                            = false                                  {diagnostic} {default}
    ccstr PrintAssemblyOptions                     =                                        {diagnostic} {default}
     bool PrintClassHistogram                      = false                                  {manageable} {default}
     bool PrintCodeCache                           = false                                     {product} {default}
     bool PrintCodeCacheOnCompilation              = false                                     {product} {default}
     bool PrintCodeHeapAnalytics                   = false                                  {diagnostic} {default}
     bool PrintCommandLineFlags                    = false                                     {product} {default}
     bool PrintCompilation                         = false                                     {product} {default}
     bool PrintCompilation2                        = false                                  {diagnostic} {default}
     bool PrintConcurrentLocks                     = false                                  {manageable} {default}
     bool PrintExtendedThreadInfo                  = false                                     {product} {default}
     bool PrintFlagsFinal                          = true                                      {product} {command line}
     bool PrintFlagsInitial                        = false                                     {product} {default}
     bool PrintFlagsRanges                         = false                                     {product} {default}
     bool PrintGC                                  = false                                     {product} {default}
     bool PrintGCDetails                           = false                                     {product} {default}
     bool PrintHeapAtSIGBREAK                      = true                                      {product} {default}
     bool PrintInlining                            = false                                  {diagnostic} {default}
     bool PrintInterpreter                         = false                                  {diagnostic} {default}
     bool PrintIntrinsics                          = false                               {C2 diagnostic} {default}
     bool PrintMetaspaceStatisticsAtExit           = false                                  {diagnostic} {default}
     bool PrintMethodData                          = false                                  {diagnostic} {default}
     bool PrintMethodFlushingStatistics            = false                                  {diagnostic} {default}
     bool PrintMethodHandleStubs                   = false                                  {diagnostic} {default}
     bool PrintNMTStatistics                       = false                                  {diagnostic} {default}
     bool PrintNMethods                            = false                                  {diagnostic} {default}
     bool PrintNativeNMethods                      = false                                  {diagnostic} {default}
     bool PrintOptoAssembly                        = false                               {C2 diagnostic} {default}
     bool PrintPreciseRTMLockingStatistics         = false                               {C2 diagnostic} {default}
     bool PrintSharedArchiveAndExit                = false                               {JVMCI product} {default}
     bool PrintSignatureHandlers                   = false                                  {diagnostic} {default}
     bool PrintStringTableStatistics               = false                                     {product} {default}
     bool PrintStubCode                            = false                                  {diagnostic} {default}
     bool PrintTieredEvents                        = false                                     {product} {default}
     bool PrintVMOptions                           = false                                     {product} {default}
     bool PrintWarnings                            = true                                      {product} {default}
    uintx ProcessDistributionStride                = 4                                         {product} {default}
     bool ProfileDynamicTypes                      = true                                {C2 diagnostic} {default}
     bool ProfileInterpreter                       = true                                   {pd product} {default}
     intx ProfileMaturityPercentage                = 20                                        {product} {default}
    uintx ProfiledCodeHeapSize                     = 119442546                              {pd product} {ergonomic}
    uintx PromotedPadding                          = 3                                         {product} {default}
    uintx QueuedAllocationWarningCount             = 0                                         {product} {default}
      int RTMRetryCount                            = 5                                    {ARCH product} {default}
     bool RangeCheckElimination                    = true                                      {product} {default}
     bool ReassociateInvariants                    = true                                   {C2 product} {default}
     bool RecordDynamicDumpInfo                    = false                               {JVMCI product} {default}
     bool ReduceBulkZeroing                        = true                                   {C2 product} {default}
     bool ReduceFieldZeroing                       = true                                   {C2 product} {default}
     bool ReduceInitialCardMarks                   = true                                   {C2 product} {default}
     bool ReduceNumberOfCompilerThreads            = true                                   {diagnostic} {default}
     bool ReduceSignalUsage                        = false                                     {product} {default}
     bool RegisterFinalizersAtInit                 = true                                      {product} {default}
     bool RelaxAccessControlCheck                  = false                                     {product} {default}
     intx RepeatCompilation                        = 0                                      {diagnostic} {default}
     bool ReplayCompiles                           = false                                  {diagnostic} {default}
    ccstr ReplayDataFile                           =                                           {product} {default}
     bool ReplayIgnoreInitErrors                   = false                                  {diagnostic} {default}
     intx ReplaySuppressInitializers               = 2                                      {diagnostic} {default}
    uintx ReservedCodeCacheSize                    = 251658240                              {pd product} {ergonomic}
     bool ResizePLAB                               = true                                      {product} {default}
     bool ResizeTLAB                               = true                                      {product} {default}
     bool RestoreMXCSROnJNICalls                   = false                                     {product} {default}
     bool RestrictContended                        = true                                      {product} {default}
     bool RestrictReservedStack                    = true                                      {product} {default}
     bool RewriteBytecodes                         = true                                   {pd product} {default}
     bool RewriteFrequentPairs                     = true                                   {pd product} {default}
     bool SafepointALot                            = false                                  {diagnostic} {default}
     bool SafepointTimeout                         = false                                     {product} {default}
     intx SafepointTimeoutDelay                    = 10000                                     {product} {default}
     bool ScavengeBeforeFullGC                     = false                                     {product} {default}
     intx ScavengeRootsInCode                      = 2                                      {diagnostic} {default}
     bool SegmentedCodeCache                       = true                                      {product} {ergonomic}
   double SelfDestructTimer                        = 0.000000                                  {product} {default}
     bool SerializeVMOutput                        = true                                   {diagnostic} {default}
    ccstr SharedArchiveConfigFile                  =                                     {JVMCI product} {default}
    ccstr SharedArchiveFile                        =                                     {JVMCI product} {default}
   size_t SharedBaseAddress                        = 34359738368                         {JVMCI product} {default}
    ccstr SharedClassListFile                      =                                     {JVMCI product} {default}
     uint SharedSymbolTableBucketSize              = 4                                   {JVMCI product} {default}
     bool ShowCarrierFrames                        = false                                  {diagnostic} {default}
     bool ShowCodeDetailsInExceptionMessages       = true                                   {manageable} {default}
     bool ShowHiddenFrames                         = false                                  {diagnostic} {default}
     bool ShowMessageBoxOnError                    = false                                     {product} {default}
     bool ShowRegistersOnAssert                    = false                                  {diagnostic} {default}
     bool ShrinkHeapInSteps                        = true                                      {product} {default}
   size_t SoftMaxHeapSize                          = 134217728000                           {manageable} {ergonomic}
     intx SoftRefLRUPolicyMSPerMB                  = 1000                                      {product} {default}
     bool SpecialArraysEquals                      = true                                {C2 diagnostic} {default}
     bool SpecialEncodeISOArray                    = true                                {C2 diagnostic} {default}
     bool SpecialStringCompareTo                   = true                                {C2 diagnostic} {default}
     bool SpecialStringEquals                      = true                                {C2 diagnostic} {default}
     bool SpecialStringIndexOf                     = true                                {C2 diagnostic} {default}
     bool SplitIfBlocks                            = true                                   {C2 product} {default}
     intx StackRedPages                            = 1                                      {pd product} {default}
     intx StackReservedPages                       = 0                                      {pd product} {default}
     intx StackShadowPages                         = 8                                      {pd product} {default}
     bool StackTraceInThrowable                    = true                                      {product} {default}
     intx StackYellowPages                         = 3                                      {pd product} {default}
    uintx StartAggressiveSweepingAt                = 10                                        {product} {default}
     bool StartAttachListener                      = false                                     {product} {default}
    ccstr StartFlightRecording                     =                                           {product} {default}
     bool StressCCP                                = false                               {C2 diagnostic} {default}
     bool StressGCM                                = false                               {C2 diagnostic} {default}
     bool StressIGVN                               = false                               {C2 diagnostic} {default}
     bool StressIncrementalInlining                = false                               {C2 diagnostic} {default}
     bool StressLCM                                = false                               {C2 diagnostic} {default}
     bool StressLdcRewrite                         = false                                  {diagnostic} {default}
     uint StressSeed                               = 0                                   {C2 diagnostic} {default}
     uint StringDeduplicationAgeThreshold          = 3                                         {product} {default}
 uint64_t StringDeduplicationHashSeed              = 0                                      {diagnostic} {default}
     bool StringDeduplicationResizeALot            = false                                  {diagnostic} {default}
    uintx StringTableSize                          = 65536                                     {product} {default}
     bool SuperWordLoopUnrollAnalysis              = true                                {C2 pd product} {default}
     bool SuperWordReductions                      = true                                   {C2 product} {default}
     bool SuppressFatalErrorMessage                = false                                     {product} {default}
    uintx SurvivorPadding                          = 3                                         {product} {default}
    uintx SurvivorRatio                            = 8                                         {product} {default}
   double SweeperThreshold                         = 15.000000                                 {product} {default}
    uintx TLABAllocationWeight                     = 35                                        {product} {default}
    uintx TLABRefillWasteFraction                  = 64                                        {product} {default}
   size_t TLABSize                                 = 0                                         {product} {default}
     bool TLABStats                                = true                                      {product} {default}
    uintx TLABWasteIncrement                       = 4                                         {product} {default}
    uintx TLABWasteTargetPercent                   = 1                                         {product} {default}
    uintx TargetPLABWastePct                       = 10                                        {product} {default}
    uintx TargetSurvivorRatio                      = 50                                        {product} {default}
    uintx TenuredGenerationSizeIncrement           = 20                                        {product} {default}
    uintx TenuredGenerationSizeSupplement          = 80                                        {product} {default}
    uintx TenuredGenerationSizeSupplementDecay     = 2                                         {product} {default}
      int ThreadPriorityPolicy                     = 1                                         {product} {jimage}
     bool ThreadPriorityVerbose                    = false                                     {product} {default}
     intx ThreadStackSize                          = 0                                      {pd product} {default}
    uintx ThresholdTolerance                       = 10                                        {product} {default}
     intx Tier0BackedgeNotifyFreqLog               = 10                                        {product} {default}
     intx Tier0Delay                               = 20                                     {diagnostic} {default}
     intx Tier0InvokeNotifyFreqLog                 = 7                                         {product} {default}
     intx Tier0ProfilingStartPercentage            = 200                                       {product} {default}
     intx Tier23InlineeNotifyFreqLog               = 20                                        {product} {default}
     intx Tier2BackEdgeThreshold                   = 0                                         {product} {default}
     intx Tier2BackedgeNotifyFreqLog               = 14                                        {product} {default}
     intx Tier2CompileThreshold                    = 0                                         {product} {default}
     intx Tier2InvokeNotifyFreqLog                 = 11                                        {product} {default}
     intx Tier3BackEdgeThreshold                   = 60000                                     {product} {default}
     intx Tier3BackedgeNotifyFreqLog               = 13                                        {product} {default}
     intx Tier3CompileThreshold                    = 2000                                      {product} {default}
     intx Tier3DelayOff                            = 2                                         {product} {default}
     intx Tier3DelayOn                             = 5                                         {product} {default}
     intx Tier3InvocationThreshold                 = 200                                       {product} {default}
     intx Tier3InvokeNotifyFreqLog                 = 10                                        {product} {default}
     intx Tier3LoadFeedback                        = 5                                         {product} {default}
     intx Tier3MinInvocationThreshold              = 100                                       {product} {default}
     intx Tier4BackEdgeThreshold                   = 40000                                     {product} {default}
     intx Tier4CompileThreshold                    = 15000                                     {product} {default}
     intx Tier4InvocationThreshold                 = 5000                                      {product} {default}
     intx Tier4LoadFeedback                        = 3                                         {product} {default}
     intx Tier4MinInvocationThreshold              = 600                                       {product} {default}
     bool TieredCompilation                        = true                                   {pd product} {default}
     intx TieredCompileTaskTimeout                 = 50                                        {product} {default}
     intx TieredOldPercentage                      = 1000                                   {diagnostic} {default}
     intx TieredRateUpdateMaxTime                  = 25                                        {product} {default}
     intx TieredRateUpdateMinTime                  = 1                                         {product} {default}
     intx TieredStopAtLevel                        = 4                                         {product} {default}
     bool TimeLinearScan                           = false                                  {C1 product} {default}
     bool TraceCompilerThreads                     = false                                  {diagnostic} {default}
     bool TraceDeoptimization                      = false                                  {diagnostic} {default}
    ccstr TraceJVMTI                               =                                           {product} {default}
     bool TraceSpilling                            = false                               {C2 diagnostic} {default}
     bool TraceTypeProfile                         = false                               {C2 diagnostic} {default}
     intx TrackedInitializationLimit               = 50                                     {C2 product} {default}
     bool TrapBasedNullChecks                      = false                                  {pd product} {default}
     bool TrapBasedRangeChecks                     = false                                  {pd product} {default}
     intx TypeProfileArgsLimit                     = 2                                         {product} {default}
     uint TypeProfileLevel                         = 0                                      {pd product} {default}
     intx TypeProfileMajorReceiverPercent          = 90                                     {C2 product} {default}
     intx TypeProfileParmsLimit                    = 2                                         {product} {default}
     intx TypeProfileWidth                         = 8                                         {product} {default}
      int UnguardOnExecutionViolation              = 0                                         {product} {default}
     bool UnlockDiagnosticVMOptions                = true                                   {diagnostic} {command line}
     bool UseAES                                   = true                                      {product} {default}
     bool UseAESCTRIntrinsics                      = true                                   {diagnostic} {default}
     bool UseAESIntrinsics                         = true                                   {diagnostic} {default}
      int UseAVX                                   = 2                                    {ARCH product} {default}
     bool UseAdaptiveGenerationSizePolicyAtMajorCollection  = true                             {product} {default}
     bool UseAdaptiveGenerationSizePolicyAtMinorCollection  = true                             {product} {default}
     bool UseAdaptiveNUMAChunkSizing               = true                                      {product} {default}
     bool UseAdaptiveSizeDecayMajorGCCost          = true                                      {product} {default}
     bool UseAdaptiveSizePolicy                    = true                                      {product} {default}
     bool UseAdaptiveSizePolicyFootprintGoal       = true                                      {product} {default}
     bool UseAdaptiveSizePolicyWithSystemGC        = false                                     {product} {default}
     bool UseAddressNop                            = true                                 {ARCH product} {default}
     bool UseAdler32Intrinsics                     = true                                   {diagnostic} {default}
     bool UseBASE64Intrinsics                      = true                                      {product} {default}
     bool UseBMI1Instructions                      = true                                 {ARCH product} {default}
     bool UseBMI2Instructions                      = true                                 {ARCH product} {default}
     bool UseBimorphicInlining                     = true                                   {C2 product} {default}
      int UseBootstrapCallInfo                     = 1                                      {diagnostic} {default}
     bool UseCLMUL                                 = true                                 {ARCH product} {default}
     bool UseCMoveUnconditionally                  = false                                  {C2 product} {default}
     bool UseCRC32CIntrinsics                      = true                                   {diagnostic} {default}
     bool UseCRC32Intrinsics                       = true                                   {diagnostic} {default}
     bool UseChaCha20Intrinsics                    = true                                   {diagnostic} {default}
     bool UseCharacterCompareIntrinsics            = false                               {C2 diagnostic} {default}
     bool UseCodeCacheFlushing                     = true                                      {product} {default}
     bool UseCompiler                              = true                                      {product} {default}
     bool UseCompressedClassPointers               = true                           {product lp64_product} {default}
     bool UseCompressedOops                        = false                          {product lp64_product} {default}
     bool UseCondCardMark                          = false                                     {product} {default}
     bool UseCopySignIntrinsic                     = true                                   {diagnostic} {default}
     bool UseCountLeadingZerosInstruction          = true                                 {ARCH product} {default}
     bool UseCountTrailingZerosInstruction         = true                                 {ARCH product} {default}
     bool UseCountedLoopSafepoints                 = true                                   {C2 product} {default}
     bool UseCounterDecay                          = true                                      {product} {default}
     bool UseDivMod                                = true                                   {C2 product} {default}
     bool UseDynamicNumberOfCompilerThreads        = true                                      {product} {default}
     bool UseDynamicNumberOfGCThreads              = true                                      {product} {default}
     bool UseEmptySlotsInSupers                    = true                                      {product} {default}
     bool UseFMA                                   = true                                      {product} {default}
     bool UseFPUForSpilling                        = true                                   {C2 product} {default}
     bool UseFastJNIAccessors                      = true                                      {product} {default}
     bool UseFastStosb                             = false                                {ARCH product} {default}
     bool UseG1GC                                  = true                                      {product} {ergonomic}
     bool UseGCOverheadLimit                       = true                                      {product} {default}
     bool UseGHASHIntrinsics                       = true                                   {diagnostic} {default}
     bool UseIncDec                                = true                              {ARCH diagnostic} {default}
     bool UseInlineCaches                          = true                                      {product} {default}
     bool UseInlineDepthForSpeculativeTypes        = true                                   {diagnostic} {default}
     bool UseInterpreter                           = true                                      {product} {default}
     bool UseJVMCICompiler                         = true                                {JVMCI product} {default}
     bool UseJVMCINativeLibrary                    = true                                   {C1 product} {default}
     bool UseJumpTables                            = true                                   {C2 product} {default}
     bool UseKNLSetting                            = false                             {ARCH diagnostic} {default}
     bool UseLargePages                            = false                                  {pd product} {default}
     bool UseLargePagesIndividualAllocation        = false                                  {pd product} {ergonomic}
     bool UseLibmIntrinsic                         = true                              {ARCH diagnostic} {default}
     bool UseLoopCounter                           = true                                      {product} {default}
     bool UseLoopInvariantCodeMotion               = true                                   {C1 product} {default}
     bool UseLoopPredicate                         = true                                   {C2 product} {default}
     bool UseMD5Intrinsics                         = true                                   {diagnostic} {default}
     bool UseMathExactIntrinsics                   = true                                {C2 diagnostic} {default}
     bool UseMaximumCompactionOnSystemGC           = true                                      {product} {default}
     bool UseMontgomeryMultiplyIntrinsic           = true                                {C2 diagnostic} {default}
     bool UseMontgomerySquareIntrinsic             = true                                {C2 diagnostic} {default}
     bool UseMulAddIntrinsic                       = true                                {C2 diagnostic} {default}
     bool UseMultiplyToLenIntrinsic                = true                                {C2 diagnostic} {default}
     bool UseNUMA                                  = false                                     {product} {default}
     bool UseNUMAInterleaving                      = false                                     {product} {default}
     bool UseNewCode                               = false                                  {diagnostic} {default}
     bool UseNewCode2                              = false                                  {diagnostic} {default}
     bool UseNewCode3                              = false                                  {diagnostic} {default}
     bool UseNewLongLShift                         = false                                {ARCH product} {default}
     bool UseNotificationThread                    = true                                      {product} {default}
     bool UseOSErrorReporting                      = false                                     {product} {default}
     bool UseOnStackReplacement                    = true                                   {pd product} {default}
     bool UseOnlyInlinedBimorphic                  = true                                   {C2 product} {default}
     bool UsePSAdaptiveSurvivorSizePolicy          = true                                      {product} {default}
     bool UseParallelGC                            = false                                     {product} {default}
     bool UsePerfData                              = true                                      {product} {default}
     bool UsePoly1305Intrinsics                    = false                                  {diagnostic} {default}
     bool UsePopCountInstruction                   = true                                      {product} {default}
     bool UseProfiledLoopPredicate                 = true                                      {product} {default}
     bool UseRTMDeopt                              = false                                {ARCH product} {default}
     bool UseRTMLocking                            = false                                {ARCH product} {default}
     bool UseSHA                                   = true                                      {product} {default}
     bool UseSHA1Intrinsics                        = false                                  {diagnostic} {default}
     bool UseSHA256Intrinsics                      = true                                   {diagnostic} {default}
     bool UseSHA3Intrinsics                        = false                                  {diagnostic} {default}
     bool UseSHA512Intrinsics                      = true                                   {diagnostic} {default}
      int UseSSE                                   = 4                                    {ARCH product} {default}
     bool UseSSE42Intrinsics                       = true                                 {ARCH product} {default}
     bool UseSerialGC                              = false                                     {product} {default}
     bool UseShenandoahGC                          = false                                     {product} {default}
     bool UseSignalChaining                        = true                                      {product} {default}
     bool UseSignumIntrinsic                       = true                                   {diagnostic} {default}
     bool UseSquareToLenIntrinsic                  = true                                {C2 diagnostic} {default}
     bool UseStoreImmI16                           = false                                {ARCH product} {default}
     bool UseStringDeduplication                   = false                                     {product} {default}
     bool UseSubwordForMaxVector                   = true                                   {C2 product} {default}
     bool UseSuperWord                             = true                                   {C2 product} {default}
     bool UseSwitchProfiling                       = true                                   {diagnostic} {default}
     bool UseSystemMemoryBarrier                   = false                                     {product} {default}
     bool UseTLAB                                  = true                                      {product} {default}
     bool UseThreadPriorities                      = true                                   {pd product} {default}
     bool UseTypeProfile                           = true                                      {product} {default}
     bool UseTypeSpeculation                       = true                                      {product} {default}
     bool UseUnalignedAccesses                     = true                                   {diagnostic} {default}
     bool UseUnalignedLoadStores                   = true                                 {ARCH product} {default}
     bool UseVectorCmov                            = false                                  {C2 product} {default}
     bool UseVectorMacroLogic                      = true                                {C2 diagnostic} {default}
     bool UseVectorizedHashCodeIntrinsic           = true                                   {diagnostic} {default}
     bool UseVectorizedMismatchIntrinsic           = true                                   {diagnostic} {default}
     bool UseVtableBasedCHA                        = true                                   {diagnostic} {default}
     bool UseXMMForArrayCopy                       = true                                      {product} {default}
     bool UseXMMForObjInit                         = true                                 {ARCH product} {default}
     bool UseXmmI2D                                = false                                {ARCH product} {default}
     bool UseXmmI2F                                = false                                {ARCH product} {default}
     bool UseXmmLoadAndClearUpper                  = true                                 {ARCH product} {default}
     bool UseXmmRegToRegMoveAll                    = true                                 {ARCH product} {default}
     bool UseZGC                                   = false                                     {product} {default}
      int VMThreadPriority                         = -1                                        {product} {default}
     intx VMThreadStackSize                        = 0                                      {pd product} {default}
     intx ValueMapInitialSize                      = 11                                     {C1 product} {default}
     intx ValueMapMaxLoopSize                      = 8                                      {C1 product} {default}
     intx ValueSearchLimit                         = 1000                                   {C2 product} {default}
     bool VerifyAdapterCalls                       = false                                  {diagnostic} {default}
     bool VerifyAfterGC                            = false                                  {diagnostic} {default}
      int VerifyArchivedFields                     = 0                                      {diagnostic} {default}
     bool VerifyBeforeExit                         = false                                  {diagnostic} {default}
     bool VerifyBeforeGC                           = false                                  {diagnostic} {default}
     bool VerifyBeforeIteration                    = false                                  {diagnostic} {default}
     bool VerifyDuringGC                           = false                                  {diagnostic} {default}
     bool VerifyDuringStartup                      = false                                  {diagnostic} {default}
     intx VerifyGCLevel                            = 0                                      {diagnostic} {default}
    uintx VerifyGCStartAt                          = 0                                      {diagnostic} {default}
ccstrlist VerifyGCType                             =                                        {diagnostic} {default}
     bool VerifyMethodHandles                      = false                                  {diagnostic} {default}
     bool VerifyObjectStartArray                   = true                                   {diagnostic} {default}
     bool VerifyReceiverTypes                      = false                                  {diagnostic} {default}
     bool VerifyRememberedSets                     = false                                  {diagnostic} {default}
     bool VerifySharedSpaces                       = false                               {JVMCI product} {default}
     bool VerifyStringTableAtExit                  = false                                  {diagnostic} {default}
ccstrlist VerifySubSet                             =                                        {diagnostic} {default}
     bool WhiteBoxAPI                              = false                                  {diagnostic} {default}
    uintx YoungGenerationSizeIncrement             = 20                                        {product} {default}
    uintx YoungGenerationSizeSupplement            = 80                                        {product} {default}
    uintx YoungGenerationSizeSupplementDecay       = 8                                         {product} {default}
   size_t YoungPLABSize                            = 4096                                      {product} {default}
   double ZAllocationSpikeTolerance                = 2.000000                                  {product} {default}
   double ZAsyncUnmappingLimit                     = 100.000000                             {diagnostic} {default}
     bool ZBufferStoreBarriers                     = true                                   {diagnostic} {default}
   double ZCollectionInterval                      = 0.000000                                  {product} {default}
   double ZCollectionIntervalMajor                 = -1.000000                                 {product} {default}
   double ZCollectionIntervalMinor                 = -1.000000                                 {product} {default}
     bool ZCollectionIntervalOnly                  = false                                     {product} {default}
   double ZFragmentationLimit                      = 0.000000                                  {product} {default}
     bool ZGenerational                            = false                                     {product} {default}
    uintx ZIndexDistributorStrategy                = 0                                      {diagnostic} {default}
   size_t ZMarkStackSpaceLimit                     = 8589934592                                {product} {default}
     uint ZOldGCThreads                            = 0                                      {diagnostic} {default}
     bool ZProactive                               = true                                      {product} {default}
     uint ZStatisticsInterval                      = 10                                     {diagnostic} {default}
     bool ZStressRelocateInPlace                   = false                                  {diagnostic} {default}
      int ZTenuringThreshold                       = -1                                     {diagnostic} {default}
     bool ZUncommit                                = true                                      {product} {default}
    uintx ZUncommitDelay                           = 300                                       {product} {default}
     bool ZVerifyForwarding                        = false                                  {diagnostic} {default}
     bool ZVerifyMarking                           = false                                  {diagnostic} {default}
     bool ZVerifyObjects                           = false                                  {diagnostic} {default}
     bool ZVerifyRemembered                        = false                                  {diagnostic} {default}
     bool ZVerifyRoots                             = false                                  {diagnostic} {default}
     bool ZVerifyViews                             = false                                  {diagnostic} {default}
   double ZYoungCompactionLimit                    = 25.000000                                 {product} {default}
     uint ZYoungGCThreads                          = 0                                      {diagnostic} {default}
     bool ZeroTLAB                                 = false                                     {product} {default}

PS C:\Program Files\GraalVM\graalvm-jdk-21.0.8+12.1\bin> .\java --list-modules
com.oracle.graal.graal_enterprise
com.oracle.svm.enterprise.truffle
com.oracle.svm.extraimage_enterprise
java.base@21.0.8
java.compiler@21.0.8
java.datatransfer@21.0.8
java.desktop@21.0.8
java.instrument@21.0.8
java.logging@21.0.8
java.management@21.0.8
java.management.rmi@21.0.8
java.naming@21.0.8
java.net.http@21.0.8
java.prefs@21.0.8
java.rmi@21.0.8
java.scripting@21.0.8
java.se@21.0.8
java.security.jgss@21.0.8
java.security.sasl@21.0.8
java.smartcardio@21.0.8
java.sql@21.0.8
java.sql.rowset@21.0.8
java.transaction.xa@21.0.8
java.xml@21.0.8
java.xml.crypto@21.0.8
jdk.accessibility@21.0.8
jdk.attach@21.0.8
jdk.charsets@21.0.8
jdk.compiler@21.0.8
jdk.crypto.cryptoki@21.0.8
jdk.crypto.ec@21.0.8
jdk.crypto.mscapi@21.0.8
jdk.dynalink@21.0.8
jdk.editpad@21.0.8
jdk.graal.compiler@21.0.8
jdk.graal.compiler.management@21.0.8
jdk.hotspot.agent@21.0.8
jdk.httpserver@21.0.8
jdk.incubator.vector@21.0.8
jdk.internal.ed@21.0.8
jdk.internal.jvmstat@21.0.8
jdk.internal.le@21.0.8
jdk.internal.opt@21.0.8
jdk.internal.vm.ci@21.0.8
jdk.internal.vm.compiler
jdk.internal.vm.compiler.management
jdk.jartool@21.0.8
jdk.javadoc@21.0.8
jdk.jcmd@21.0.8
jdk.jconsole@21.0.8
jdk.jdeps@21.0.8
jdk.jdi@21.0.8
jdk.jdwp.agent@21.0.8
jdk.jfr@21.0.8
jdk.jlink@21.0.8
jdk.jpackage@21.0.8
jdk.jshell@21.0.8
jdk.jsobject@21.0.8
jdk.jstatd@21.0.8
jdk.localedata@21.0.8
jdk.management@21.0.8
jdk.management.agent@21.0.8
jdk.management.jfr@21.0.8
jdk.naming.dns@21.0.8
jdk.naming.rmi@21.0.8
jdk.net@21.0.8
jdk.nio.mapmode@21.0.8
jdk.random@21.0.8
jdk.sctp@21.0.8
jdk.security.auth@21.0.8
jdk.security.jgss@21.0.8
jdk.unsupported@21.0.8
jdk.unsupported.desktop@21.0.8
jdk.xml.dom@21.0.8
jdk.zipfs@21.0.8
org.graalvm.collections
org.graalvm.extraimage.builder
org.graalvm.nativeimage
org.graalvm.nativeimage.llvm
org.graalvm.truffle.compiler
org.graalvm.word


